<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shader 水波效果</title>
    <url>/2020/12/09/Shader/%E6%A8%A1%E6%8B%9F%E6%B0%B4%E6%B3%A2%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h3 id="水波特效"><a href="#水波特效" class="headerlink" title="水波特效"></a>水波特效</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/Shader10&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Tex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Color (&quot;Main Tint&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">        _InvwaveLength(&quot;InvwaveLength&quot;, Range(0, 5)) = 0.5</span><br><span class="line">        _Frequency(&quot;Frequency&quot;, Range(0, 5)) = 0.5</span><br><span class="line">        _Magnitude(&quot;Magnitude&quot;, Range(0, 4)) = 0.5</span><br><span class="line">        _Speed(&quot;Speed&quot;, Range(0, 4)) = 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float3 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f </span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float _InvwaveLength;</span><br><span class="line">            float _Frequency;</span><br><span class="line">            float _Magnitude;</span><br><span class="line">            float _Speed;</span><br><span class="line">            float4 _Color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                </span><br><span class="line">                float4 offset;</span><br><span class="line">                offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line">                offset.x = sin(_Frequency * _Time.y + v.vertex.x * _InvwaveLength + v.vertex.y * _InvwaveLength + v.vertex.z * _InvwaveLength) * _Magnitude;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex + offset);</span><br><span class="line"></span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                o.uv += float2(0.0, _Time.y * _Speed);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">                c.rgb *= _Color.rgb;</span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最主要的就是offset的计算，因为只需要进行x方向的位移，因此初始化时yzw都是0，然后将Frequency <em> Time.y 用来控制频率，也就是x方向上的来回移动频率。Frequency 值越大，则来回移动的频率越高。然后后面的vertex.xyz </em> Frequency是为了控制不同顶点的位置具有不同的位移，x是x轴上的顶点具有不同的位移，就会出现波动的效果，同理，yz轴也是一样的。最后再乘以Magnitude，用以控制波动的幅度。</p>
<p>Speed则用来做UV动画，增加移动的效果，只做y方向的移动，因此将UV加上一个x为0，y为Speed * _Time.y的数值。这样整个效果看起来就跟流动的水面一样</p>
<p>最后在frag中将最终效果添加上颜色，这样可以进行颜色的调整。</p>
]]></content>
      <tags>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>Shader 内置变量-时间</title>
    <url>/2020/12/07/Shader/%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F-%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="内置变量-时间类型"><a href="#内置变量-时间类型" class="headerlink" title="内置变量-时间类型"></a>内置变量-时间类型</h2><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">_Time</td>
<td style="text-align:center">float4</td>
<td style="text-align:center">t是自场景加载开始所经过的时间，4个分量分别是（t/20, t, 2t, 3t)</td>
</tr>
<tr>
<td style="text-align:center">_SinTime</td>
<td style="text-align:center">float4</td>
<td style="text-align:center">t是时间的正弦值，4个分量分别是（t/8, t/4, t/2, t)</td>
</tr>
<tr>
<td style="text-align:center">_CosTime</td>
<td style="text-align:center">float4</td>
<td style="text-align:center">t是时间的正弦值，4个分量分别是（t/8, t/4, t/2, t)</td>
</tr>
<tr>
<td style="text-align:center">unity_DeltaTime</td>
<td style="text-align:center">float4</td>
<td style="text-align:center">dt是时间的增量，4个分量分别是（dt, 1/dt, smoothDt, 1/ smoothDt)</td>
</tr>
</tbody>
</table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="UV动画"><a href="#UV动画" class="headerlink" title="UV动画"></a>UV动画</h4><p>游戏中经常有需要一些特殊需求的移动动画，比如河流、背景等。这些都是循环的UV动画，将UV根据时间进行变化就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/Shader09&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;1st Layer (RBG)&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _DetailTex(&quot;2nd Layer (RGB)&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _ScrollX (&quot;1st Layer Speed&quot;, Float) = 1.0</span><br><span class="line">        _Scroll2X (&quot;2st Layer Speed&quot;, Float) = 1.0</span><br><span class="line">        _MultipLier (&quot;Layer Multiplier&quot;, Float) = 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass&#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float3 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f </span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                // float3 worldNormal : TEXCOORD0;</span><br><span class="line">                // float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float4 _DetailTex_ST;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            sampler2D _DetailTex;</span><br><span class="line">            float _ScrollX;</span><br><span class="line">            float _Scroll2X;</span><br><span class="line">            float _MultipLier;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex) + frac(float2(_ScrollX, 0.0) * _Time.y);</span><br><span class="line">                // o.uv.zw = TRANSFORM_TEX(v.texcoord, _DetailTex) + frac(float2(_Scroll2X, 0.0) * _Time.y);</span><br><span class="line">                // v2f o;</span><br><span class="line">                // o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                // o.worldNormal = UnityOBjectToWorldNormal(v.texcoord);</span><br><span class="line">                // o.worldPos = mul(unity_ObjectToWorld, o.vertex).xyz;</span><br><span class="line">                // o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 firstLayer = tex2D(_MainTex, i.uv);</span><br><span class="line">                // fixed4 secondLayer = tex2D(_DetailTex, i.uv.zw);</span><br><span class="line"></span><br><span class="line">                // fixed4 c = lerp(firstLayer, secondLayer, secondLayer.a);</span><br><span class="line">                // c.rgb *= _MultipLier;</span><br><span class="line">                return firstLayer;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子大部分跟模板没有什么区别，主要是在Vert方法中，uv的计算加上了时间量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o.uv = TRANSFORM_TEX(v.texcoord, _MainTex) + frac(float2(_ScrollX, 0.0) * _Time.y);</span><br></pre></td></tr></table></figure>
<p>frac方法是取小数部分，ScrollX是移动速度，时间乘以ScrollX然后取小数部分，因为UV的取值范围为[0, 1]，因此这里使用了frac方法进行取值</p>
<p>这里只做X的位移，因此只加了一个变量ScrollX，如果需要多个轴向的，则可以添加多个变量，将frac中的0.0改掉即可。</p>
]]></content>
      <tags>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>光照模型</title>
    <url>/2020/12/03/Shader/%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>光照模型用于模拟游戏中物体对于直接光照的辐射现象，比如物体的反射、漫反射、环境光等。前人已经很好的归纳了游戏中常用的一些光照模型公式，我们需要的只是照着用就可以了。</p>
<p>而在Shader中，因为我们是顶点片段着色器写，因此需要区分是在哪个着色器中进行计算光照，按照在不同的着色器中进行计算关照分为：逐顶点关照跟逐像素光照</p>
<h2 id="计算光照"><a href="#计算光照" class="headerlink" title="计算光照"></a>计算光照</h2><p>逐顶点关照即在每个顶点计算光照，顶点数量决定了计算量，一般比逐像素的快，也就是定点数少于像素点的数量。同时逐顶点光照将计算写在vert方法中，这种方式由于线性插值计算的原因，在阴影等交界的地方可能会出现锯齿一般的棱角。</p>
<p>逐像素光照以每个像素为基础，根据其法线与光照的角度进行计算，</p>
<p>逐顶点光照：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &apos;_World2Object&apos; with &apos;unity_WorldToObject&apos;</span><br><span class="line">// 逐顶点光照  即光照处理卸载顶点着色器vert中</span><br><span class="line"></span><br><span class="line">Shader &quot;Custom/Shader03&quot;&#123;</span><br><span class="line"></span><br><span class="line">    Properties &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader &#123;</span><br><span class="line">        Tags &#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125;</span><br><span class="line">        Pass&#123;</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line"></span><br><span class="line">            struct a2v &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                fixed3 color : COLOR;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)&#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span><br><span class="line">                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rbg * saturate(dot(worldNormal, worldLight));</span><br><span class="line"></span><br><span class="line">                o.color = ambient + diffuse;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target &#123;</span><br><span class="line">                return fixed4(i.color, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逐像素光照：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &apos;_World2Object&apos; with &apos;unity_WorldToObject&apos;</span><br><span class="line">// 逐像素光照，即光照计算卸载frag中</span><br><span class="line"></span><br><span class="line">Shader &quot;Custom/Shader04&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties </span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot; &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct a2v </span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f </span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = mul(v.normal, (float3x3)unity_WorldToObject);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line">                fixed3 color = ambient + diffuse;</span><br><span class="line"></span><br><span class="line">                return fixed4(color, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>顶点片段着色器（Vertex &amp; Fragment Shader)</title>
    <url>/2020/12/02/Shader/%E9%A1%B6%E7%82%B9%E7%89%87%E6%AE%B5%E7%9D%80%E8%89%B2%E5%99%A8%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="顶点片段着色器（Vertex-amp-Fragment-Shader"><a href="#顶点片段着色器（Vertex-amp-Fragment-Shader" class="headerlink" title="顶点片段着色器（Vertex &amp; Fragment Shader)"></a>顶点片段着色器（Vertex &amp; Fragment Shader)</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>着色器的代码主要都是在Vertex跟Fragment方法中进行编写，外部的格式都是差不多的。整个框架记住即可，一个最普通的着色器大体格式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shader &quot;shader Path/shaderName&quot;&#123;</span><br><span class="line">    Properties &#123;</span><br><span class="line">        // 定义变量</span><br><span class="line">        _Color(&quot;Main Color&quot;, Clolr) = (1, 1, 1, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader &#123;</span><br><span class="line">    	Tags &#123;&quot;RenderType&quot; = &quot;Opaque&quot;&#125;</span><br><span class="line">        Pass&#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert	// 定义vert方法</span><br><span class="line">            #pragma fragment frag	// 定义frag方法</span><br><span class="line">            #include &quot;UnityCG.cginc&quot;	// 引入unity内置库</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            </span><br><span class="line">            float4 vert(float4 vertex : POSITION) : SV_POSITION&#123;</span><br><span class="line">                return UnityObjectToClipPos(vertex);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fixed4 frag() : SV_Target&#123;</span><br><span class="line">                return _Color;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Deffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由上面可看出基本的框架为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shader &quot;Name&quot;&#123;</span><br><span class="line">    Properties&#123;&#125;</span><br><span class="line">    SubShader&#123;</span><br><span class="line">        Pass&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Shader-标题"><a href="#Shader-标题" class="headerlink" title="Shader 标题"></a>Shader 标题</h3><p>首先是Shader “Shader Path / Shader Name”，一定以Shader开头，然后双引号，双引号里面的是string，以/进行分割的路径，最后的是shader名，这一段string决定了在Material的Inspector面板怎么找到对应的Shader。</p>
<h3 id="Properties-与变量"><a href="#Properties-与变量" class="headerlink" title="Properties 与变量"></a>Properties 与变量</h3><p>Properties中用来定义变量，这些变量会在Inspector中显示，并进行交互。变量的格式为：[属性标记]变量名（显示名称，变量类型）= 默认值。变量名一般以下划线开头，显示名称为变量在Inspector显示的名称，变量类型为Shader的内置变量类型，变量值为不同类型默认值。这里的类型有：Int整数、Color颜色、Float浮点型、Vector四维数、2D纹理、3D纹理跟Cube纹理，对应的默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_Color (&quot;Color&quot;, Color) = (1, 1, 1, 1) // 颜色也是四维数</span><br><span class="line">_Int (&quot;Int&quot;, Int) = 1 	// int 型</span><br><span class="line">_Float(&quot;Float&quot;, Float) = 0.5</span><br><span class="line">_Float(&quot;_Float&quot;, Range(0, 1)) = 0.5 // 滑动条，可以是Int/Float型，用以限制数字区间</span><br><span class="line">_Vector (&quot;Vector&quot;, Vector) = (1, 1, 1, 1)</span><br><span class="line">_MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125; // 贴图纹理，默认值为&quot;white&quot;纯白色，&quot;black&quot;纯黑色，&quot;gray&quot;灰色，&quot;bump&quot;法线图。直接&quot;&quot;&#123;&#125;默认为gray</span><br><span class="line">_MainTex (&quot;3d&quot;, 3d) = &quot;&quot;&#123;&#125; // 3d贴图只有灰色，即gray，默认就是gray</span><br><span class="line">_MainTex (&quot;cube 纹理&quot;) = &quot;&quot;&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>属性标记用于特殊情况，通常用于限制变量的范围等。常用的有：HideInInspector在Inspector面板隐藏、Header 提示、Enum枚举、Toggle、IntRange限定为整形范围、PowerSlider滑动条等，只要在属性前面加上就会起到对应的作用，这个跟Unity的属性是一样的</p>
<h3 id="SubShader"><a href="#SubShader" class="headerlink" title="SubShader"></a>SubShader</h3><p>SubShader就是Shader实际上运行的东西，可以有多个。多个的原因是需要支持不同的设备，比如根据性能不同进入不同的SubShader等。</p>
<h3 id="Pass"><a href="#Pass" class="headerlink" title="/ Pass"></a>/ Pass</h3><p>Tags定义渲染的类型，比如Opaque为不透明，</p>
<p>FallBack是一种保底方案，如果上面的SubShader都无效的情况下，可以使用FallBack的，使其能够支持最基本的运行。</p>
<p>Pass就是渲染一次，而里面的内容我们需要包含在CGPROGRAM跟ENDCG中，表示开始跟结束，这个意思是里面的代码Cg/HLSL代码</p>
<p>#pragma 定义两个方法，分别为顶点跟片段，即上面的vertex/fragment，然后名称为vert/frag，名称都可以，为了保持一致，通常直接使用简写。</p>
<p>方法结构跟其他的语言类似，也是返回值  函数名（参数）{函数体}，只是多了几个语义需要注意。</p>
<p>Vert/Frag方法，其实只看方法名就可以猜测，Vert处理的是顶点，而frag处理的是片段。实际上也差不多，vert方法输入的是顶点的位置信息，返回的就是映射后的屏幕信息。不仅如此，vert方法处理的是前面阶段准备好的一些素材，比如顶点，颜色，UV等。而对应的，frag接收的就是从vert返回的数据，然后对颜色等做处理，这通常就是我们的效果真正需要处理的地方。</p>
<p>整个顶点/片段着色器的框架就是如此！新手，且行！</p>
]]></content>
      <tags>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows批处理命令</title>
    <url>/2019/11/28/Cmd/01/</url>
    <content><![CDATA[<h1 id="Windows批处理命令"><a href="#Windows批处理命令" class="headerlink" title="Windows批处理命令"></a>Windows批处理命令</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Windows批处理命令是使用一些含有特殊意义的符号和一些完成指定功能的命令组合而成</p>
<h2 id="常见批处理命令"><a href="#常见批处理命令" class="headerlink" title="常见批处理命令"></a>常见批处理命令</h2><ol>
<li><p>REM 和 ::</p>
<p>为注释命令，后面的内容不显示不执行</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos性能优化-DrawCall</title>
    <url>/2019/10/25/Cocos/Cocos%20DrawCall%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>DrawCall是CPU通知GPU进行一次渲染命令的过程，如果DrawCall次数过多，同样会占用过多的CPU</p>
<p>由于BBC游戏使用的是Cocos Creator自带的AutoAtlas，这就导致在浏览器中无法准确的输出真实的DrawCall数量，因此这里只做DrawCall的原理分析跟需要注意的事项</p>
<h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p>a.  Label与RichText尽量少，RichText的标签尽量少</p>
<p>b. Label/RichText与Sprite尽量分离，Label</p>
<h1 id="一、AutoAtlas不具有参考意义"><a href="#一、AutoAtlas不具有参考意义" class="headerlink" title="一、AutoAtlas不具有参考意义"></a>一、AutoAtlas不具有参考意义</h1><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_01.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_01_1.png?raw=true" alt="img"></p>
<p>如上图，浏览器的Show FPS命令可以显示DrawCall数量，如果项目中使用的是打包好的图集，那么，此处的DrawCall数量就是正确的</p>
<p>如果使用的是Cocos 自带的AutoAtlas，那么，这里显示的DrawCall数量其实是图集未打包前的DrawCall，也就是说，这个数量其实是偏高的</p>
<p>因为Cocos 的AutoAtlas并不支持浏览器的时候预览，只能打包才能自动创建图集</p>
<p>因此如果使用AutoAtlas，此处的DrawCall并没有多大的参考意义，这个数字只是场景中Sprite跟label的数量罢了</p>
<p>而AutoAtlas最严重的问题在于，它并不是生成一个图集，而是动态调整生成。如果所有图素超过AotuAtlas定义的的宽高上限，则会生成多个贴图</p>
<p>这就导致，我们根本无法判断哪个图片是在同一个图集中，即使这两张图在一个文件夹里面，当我们增删图片时，再次看预览就不一样了</p>
<p>反应在界面上，就是我们没办法确切的知道同一个AutoAtlas中的图素是否会合批，或许官方有能力做到同一个AutoAtlas中的贴图不论是哪张，都可以准确合批，文档没有，无从了解</p>
<p>拆包来看，生成的贴图跟预览的数量是一致的：（资源未做保护，直接拆包可得）</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_03.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_02.png?raw=true" alt="img"></p>
<h1 id="二、DrawCall合批规则"><a href="#二、DrawCall合批规则" class="headerlink" title="二、DrawCall合批规则"></a>二、DrawCall合批规则</h1><p>使用TexturePacker生成图集，然后可以在浏览器中分析DrawCall的数量跟原理</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>现有图集如下：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_04.png?raw=true" alt="img"></p>
<h3 id="规则1：同一个图集的图素在节点树中如果按顺序排列，则会合并成一个DrawCall"><a href="#规则1：同一个图集的图素在节点树中如果按顺序排列，则会合并成一个DrawCall" class="headerlink" title="规则1：同一个图集的图素在节点树中如果按顺序排列，则会合并成一个DrawCall"></a>规则1：同一个图集的图素在节点树中如果按顺序排列，则会合并成一个DrawCall</h3><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_05.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_06.png?raw=true" alt="img"></p>
<p>两张图素同属于上面的图集，DrawCall数量为1，这个顺序不容许任何意义上的打乱，否则都会断开，分为多个DrawCall</p>
<p>最底下插入一张散图：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_07.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_08.png?raw=true" alt="img"></p>
<h3 id="规则2：统一图集的图素，如果在节点树中不连续，则会分为多个drawcall"><a href="#规则2：统一图集的图素，如果在节点树中不连续，则会分为多个drawcall" class="headerlink" title="规则2：统一图集的图素，如果在节点树中不连续，则会分为多个drawcall"></a>规则2：统一图集的图素，如果在节点树中不连续，则会分为多个drawcall</h3><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_09.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_10.png?raw=true" alt="img"></p>
<p>如上图，将Frame1往上插入两个同一图集的图素中间，结果每个图素都生成了一个DrawCall</p>
<h3 id="规则3：Label、RichText不会合批，一个Label就会生成一个DrawCall"><a href="#规则3：Label、RichText不会合批，一个Label就会生成一个DrawCall" class="headerlink" title="规则3：Label、RichText不会合批，一个Label就会生成一个DrawCall"></a>规则3：Label、RichText不会合批，一个Label就会生成一个DrawCall</h3><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_11.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_12.png?raw=true" alt="img"></p>
<h3 id="规则4：RichText使用几个标签，就会有多少个DrawCall"><a href="#规则4：RichText使用几个标签，就会有多少个DrawCall" class="headerlink" title="规则4：RichText使用几个标签，就会有多少个DrawCall"></a>规则4：RichText使用几个标签，就会有多少个DrawCall</h3><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_13.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_14.png?raw=true" alt="img"></p>
<h3 id="规则5：Mask单独占用两个DrawCall"><a href="#规则5：Mask单独占用两个DrawCall" class="headerlink" title="规则5：Mask单独占用两个DrawCall"></a>规则5：Mask单独占用两个DrawCall</h3><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_15.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_16.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/%E9%A1%B5%E9%9D%A2DrawCall%E5%88%86%E6%9E%90/cocos_drawCall_17.png?raw=true" alt="img"></p>
<p>如图：什么都没有，只加了一个空Node，并添加Mask组件，DrawCall为2</p>
<p>而其底下的元素另算，如果TYPE是IMAGE模式也不影响，还是2个DrawCall，添加的蒙板图片不算DrawCall</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos 搜索</title>
    <url>/2019/10/20/Cocos/cocos%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>cocos搜索极致的卡顿，使用标签搜索可以略微提高丢丢效率，聊胜于无</p>
<p>标签搜索可以同时在Assets面板跟NodeTree面板使用，不过标签不一样</p>
<h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="Assets资源管理器面板"><a href="#Assets资源管理器面板" class="headerlink" title="Assets资源管理器面板"></a>Assets资源管理器面板</h3><p>资源管理器面板主要是用资源类型搜索，比如预制体prefab，精灵sprite-frame</p>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">使用方式</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">解释</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">prefab</td>
<td style="text-align:left">预制体</td>
<td style="text-align:left">t:prefab + name</td>
<td style="text-align:left">t:prefab rank</td>
<td style="text-align:left">搜索名字中包含rank的预制体</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/1.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">sprite-frame</td>
<td style="text-align:left">精灵图素</td>
<td style="text-align:left">t:sprite-frame + name</td>
<td style="text-align:left">t:sprite-frame icon</td>
<td style="text-align:left">搜索名字中包含icon的精灵图片</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/2.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">javascript/typescript/coffeescript</td>
<td style="text-align:left">代码</td>
<td style="text-align:left">t:javascript + name</td>
<td style="text-align:left">t:javascript rank</td>
<td style="text-align:left">搜索包含rank的js代码文件</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/3.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">animation-clip</td>
<td style="text-align:left">动画</td>
<td style="text-align:left">t:animation-clip + name</td>
<td style="text-align:left">t:animation-clip rank</td>
<td style="text-align:left">搜索包含rank的动画</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/4.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">audio-clip</td>
<td style="text-align:left">音频</td>
<td style="text-align:left">t:audio-clip + name</td>
<td style="text-align:left">t:audio-clip click</td>
<td style="text-align:left">搜索包含click的音频</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/5.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">bitmap-font或者font</td>
<td style="text-align:left">位图字体/字体</td>
<td style="text-align:left">t:bitmap-font</td>
<td style="text-align:left">t:bitmap-font time</td>
<td style="text-align:left">搜索包含time的位图字体</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/6.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">scene</td>
<td style="text-align:left">场景</td>
<td style="text-align:left">t:scene + name</td>
<td style="text-align:left">t:scene</td>
<td style="text-align:left">搜索场景</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/7.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">folder</td>
<td style="text-align:left">文件夹</td>
<td style="text-align:left">t:folder + name</td>
<td style="text-align:left">t:folder anim</td>
<td style="text-align:left">搜索带anim的文件夹</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/8.png?raw=true" alt="img"></td>
</tr>
</tbody>
</table>
<p>常用资源类型查阅：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/9.png?raw=true" alt="img"></p>
<h3 id="NodeTree层级管理器面板"><a href="#NodeTree层级管理器面板" class="headerlink" title="NodeTree层级管理器面板"></a>NodeTree层级管理器面板</h3><p>层级面板的搜索主要使用组件类型搜索，比如节点cc.Node，动画组件cc.Animation</p>
<table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">使用方式</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">解释</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cc.Node</td>
<td style="text-align:left">节点</td>
<td style="text-align:left">t:cc.Node + name</td>
<td style="text-align:left">t:cc.Node rank</td>
<td style="text-align:left">搜索带rank的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/10.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">cc.Animation</td>
<td style="text-align:left">动画组件</td>
<td style="text-align:left">t:cc.Animation + name</td>
<td style="text-align:left">t:cc.Animation</td>
<td style="text-align:left">搜索挂载有Animation组件的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/11.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">cc.Label</td>
<td style="text-align:left">Label 组件</td>
<td style="text-align:left">t:cc.Label + name</td>
<td style="text-align:left">t:cc.Label tip</td>
<td style="text-align:left">搜索名称中带有tip且挂载Label组件的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/12.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">cc.Button</td>
<td style="text-align:left">按钮</td>
<td style="text-align:left">t:cc.Button + name</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">cc.Sprite</td>
<td style="text-align:left">Sprite组件</td>
<td style="text-align:left">t:cc.Sprite + name</td>
<td style="text-align:left">t:cc.Sprite bg</td>
<td style="text-align:left">搜索名称中带bg且挂载有sprite组件的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/13.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">cc.Toggle</td>
<td style="text-align:left">toggle组件</td>
<td style="text-align:left">t:cc.Toggle</td>
<td style="text-align:left">t:cc.Toggle</td>
<td style="text-align:left">搜索挂载有toggle组件的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/14.png?raw=true" alt="img"></td>
</tr>
<tr>
<td style="text-align:left">cc.EditBox</td>
<td style="text-align:left">EditBox组件</td>
<td style="text-align:left">t:cc.EditBox</td>
<td style="text-align:left">t:cc.EditBox</td>
<td style="text-align:left">搜索挂载有EditBox组件的节点</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">t:cc.Layout</td>
<td style="text-align:left">Layout组件</td>
<td style="text-align:left">t:cc.Layout</td>
<td style="text-align:left">t:cc.Layout</td>
<td style="text-align:left">搜索挂载有Layout组件的节点</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">t:name</td>
<td style="text-align:left">自定义组件</td>
<td style="text-align:left">t:festivalSkin</td>
<td style="text-align:left">t:festivalSkin</td>
<td style="text-align:left">搜索挂载有festivalSkin的节点</td>
<td style="text-align:left"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/15.png?raw=true" alt="img"></td>
</tr>
</tbody>
</table>
<p>常用组件类型查阅：</p>
<p>在节点的Properties面板的AddComponent可以点开，或者创建节点时可以看到</p>
<p><img src="https://app.yinxiang.com/shard/s20/res/ed37cafe-dfa6-433d-8363-7f2fd949fdb6.png" alt="img"><img src="https://app.yinxiang.com/shard/s20/res/f16ea6d6-919a-40a4-a261-0c189db71c3d.png" alt="img"></p>
<h3 id="联合搜索"><a href="#联合搜索" class="headerlink" title="联合搜索"></a>联合搜索</h3><p>需要同时搜索多个标签怎么办，使用英文逗号隔开即可，这种情况不常用</p>
<p>搜索精灵跟预制体中包含rank的资源，结果如下</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/16.png?raw=true" alt="img"></p>
<h3 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h3><p>比如我只知道排行包含r、k两个字母，那么我可以直接使用：t:prefab r k</p>
<p>r跟k中间加入一个空格，可以搜索出带这两个字母或者其中一个的所有预制体</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/Cocos%E6%90%9C%E7%B4%A2/17.png?raw=true" alt="img"></p>
]]></content>
      <tags>
        <tag>Cocos</tag>
      </tags>
  </entry>
  <entry>
    <title>时间论计时器</title>
    <url>/2019/10/04/Lua/%E6%97%B6%E9%97%B4%E8%BD%AE%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="时间轮计时器"><a href="#时间轮计时器" class="headerlink" title="时间轮计时器"></a>时间轮计时器</h2><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>需求是模拟服务器的各种计时，比如建筑升级倒计时、角色升级倒计时、活动截止倒计时等。按照基本设计，一个list保存所有的计时器，然后在Update中进行遍历倒计时，哪一个时间到了则进行回调通知，通知完删除回调。这种做法如果数量多了不是很美，因此采用了时间轮的做法。</p>
<p>这里设计的时间轮为一轮为60秒，最小单位为秒，即无法处理时间单位小于秒的计时。每一秒为一个tick，每一个tick都保存对应的一个list数组，新建计时器时，将计时器的时间转为tick，保存进对应的list数组中，一旦到达这个时间点，则遍历调用这个tick下的所有事件回调。上一张网上盗的时间轮效果图：</p>
<p><img src="https://stl.woobest.com/wiki/download/attachments/54155354/image2019-8-7_11-1-37.png?version=1&amp;modificationDate=1565146898000&amp;api=v2" alt="时间轮效果图"></p>
<h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><p>计时器的重要东西就是时间轴，本来想直接使用lua的协程模拟自然时间，但是考虑到协程的不确定性，直接用了框架中的<em>GameMain</em>中的<em>addUpdateFunc</em>进行绑定<em>update</em>进行计时，在脚本的<em>init</em>方法中绑定，<em>release</em>中进行释放</p>
<p>计时需要每一秒跳动一次，因此使用一个timer进行判断，如果其整数部分发生了变化，则表示已经读秒，则时间进行增值操作，同时推动对应那一秒的事件list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`---``计时``function fn.update(arg1)``    ``fn.timer = fn.timer + arg1``    ``fn.preSecond = math.floor(fn.timer)``    ``if fn.preSecond &gt; fn.second then``        ``fn.second = fn.preSecond``        ``fn.pushTick()``    ``end` `    ``if fn.preSecond &gt;= fn.roundLimited then``        ``fn.timer =` `0``        ``fn.preSecond =` `0``        ``fn.second =` `0``        ``fn.round = fn.round +` `1``    ``end``end`</span><br></pre></td></tr></table></figure>
<h3 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h3><p>时间轴有了以后，就是数据的存储问题。总共存在两种数据，一为计时器数据，存储了每个计时器的时间长度、删除标志位、计时器结束回调等。二为时间轮数据，也就是一个最长为60的数据table，每一秒对应一个计时器list，这个list保存了当前时间点结束的所有计时器，虽然只有60个，但是可以存储的数据时无上限的理论上</p>
<p>注册开放了一个register接口，传入的数据为时间跟回调以及回调函数的参数，时间的单位为秒，所有的时间都需要转换为秒再传入。然后新建一个计时器并添加进时间轮数据对应的秒上面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`---``添加计时器``---``@param key string 事件``---``@param time number 秒``---``@param callback function 回调``function module.register(time``,` `callback``,` `...)``    ``local node = ServerTimerStruct.new()``    ``local round``,` `tick = fn.transformTimeToTick(time)``    ``node:``init(time``,` `callback``,` `...)` `    ``if not fn.timeWheel``[``tick``]` `then``        ``fn.timeWheel``[``tick``]` `= ``&#123;``&#125;``    ``end` `    ``table.insert(fn.timeWheel``[``tick``]``,` `node)``end`</span><br></pre></td></tr></table></figure>
<h3 id="事件推动"><a href="#事件推动" class="headerlink" title="事件推动"></a>事件推动</h3><p>事件注册成功以后，会在时间轮数据的对应的节点上进行添加，每当自然时间走完一秒，就会推动时间轮对应的那一秒事件list，如果list中存在计时器，且计时器的结束时间就是当前秒，则直接推动，否则不做处理，推动事件以后，删除此事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`---``推动时间轮``function fn.pushTick()``    ``---``@type ServerTimerStruct``[``]``    ``local tickList = fn.timeWheel``[``fn.second``]``    ``if tickList and ``#tickList &gt; 0 then``        ``local posList = ``&#123;``&#125;``        ``for k``,` `v in pairs(tickList) do``            ``if v``:``compareTime(fn.round``,` `fn.second) then``                ``v:``push()``            ``end``        ``end``        ``module.remove(fn.second)``    ``end``end`</span><br></pre></td></tr></table></figure>
<h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3><p>这个时间轮只存在一个轮子，如果单个秒上面的事件过多，而又不是同一个时间点结束的话，会做很多多余的操作</p>
<ol>
<li>有一种想法为：直接将时间轮的数据改为一个key-value数据，key为计时器的结束时间点，value为计时器，这样的话，每一秒直接去时间轮判断是否有当前时间点结束的事件数据，有则推动，无则不做处理，这里的时间点是游戏开始以来的总长度，而不是跟上面时间轮一样的只是1-60秒的时间点</li>
<li>再创建一个以分为单位的时间轮，一个以小时为单位的时间轮，如果有超过一分钟的计时器，则在分钟上面进行保存，就跟时钟一样，秒的时间轮走过一轮，分钟的时间轮轮数加一，轮数到了以后，将分钟上面的计时器转移到以秒为单位的时间轮上面，这样只要秒数一到，可以直接推动计时器的回调函数，每个计时器随着时间的流走，从小时的时间轮转移到分钟的时间轮再转移到秒的时间轮，最后推动</li>
</ol>
]]></content>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro - 图文混排解决方案</title>
    <url>/2019/08/13/TextMeshPro/TextMeshPro-%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>TextMeshPro原生支持图文混排，因此需要做的就是规定好字体跟图集的规范，使用起来才能事半功倍</p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>TextMeshPro显示图素并不复杂，直接使用类似富文本的格式进行插入即可</p>
<p>例如：升级厢房到2级需要\n&lt;sprite=0&gt;1000秒\n &lt;sprite=2&gt;1000\n 确定升级吗？</p>
<p>以上这一段文本的显示效果为：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/1.png?raw=true" alt="img"></p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/2.png?raw=true" alt="img"></p>
<h3 id="颜色变化：更多请参考：3-Sprite-Assets"><a href="#颜色变化：更多请参考：3-Sprite-Assets" class="headerlink" title="颜色变化：更多请参考：3. Sprite Assets"></a>颜色变化：更多请参考：<a href="https://stl.woobest.com/wiki/display/T18/3.+Sprite+Assets" target="_blank" rel="noopener">3. Sprite Assets</a></h3><ol>
<li>只有字颜色变化，图片颜色不变</li>
<li>图片跟字颜色一起变化</li>
<li>图片变化，字颜色不变</li>
</ol>
<p>以下图片与字颜色皆为白色</p>
<p>1：通用模式，直接修改VetextColor：&lt;sprite=1&gt;继续加油</p>
<p>效果：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/3.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/4.png?raw=true" alt="img"></p>
<p>2：&lt;sprite=1, tint=1&gt;继续加油</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/5.png?raw=true" alt="img"></p>
<p>3： &lt;color=#FF0000&gt;&lt;sprite=1, tint=1&gt;&lt;color=#ffffff&gt;继续加油  或者 &lt;sprite=1 color=#FF0000&gt;继续加油</p>
<p>效果：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/6.png?raw=true" alt="img"></p>
<h3 id="多语言用法"><a href="#多语言用法" class="headerlink" title="多语言用法"></a>多语言用法</h3><p>示例：</p>
<p>\n：换行</p>
<p>&lt;sprite=%d&gt;: 图片id  需要保证此id跟Sprite Asset中的id是一致的</p>
<p>考虑到多个Sprite Asset，改为<sprite name="resourceName">，resourceName为游戏中资源名</sprite></p>
<p>使用：亲喵~ 确定要消耗\n<sprite name="%s">%d\n将建筑升级到2级吗？</sprite></p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/7.png?raw=true" alt="img"></p>
<p>效果：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/8.png?raw=true" alt="img"></p>
<p>为确保Sprite Asset的图片id跟资源id保持一致，</p>
<p>法1：可以在Sprite Asset上点开Sprite Character Table进行编辑，修改Glyph ID即可调整顺序，保证图片ID跟此处的Glyph ID一致即可</p>
<p>缺点：每次重新生成Sprite Asset都需要手动修改一遍id，数量一多简直灾难</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/9.png?raw=true" alt="img"></p>
<p>法2：Resources表添加id，对应这个数据</p>
<p>再议，Sprite Asset 每次生成id都不一致，需要看看原理</p>
]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro - FallBack机制</title>
    <url>/2019/08/12/TextMeshPro/TextMeshPro-Falback%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>无论是Font Asset 还是Sprite Asset，其大小都是有限制的，不可能无限的大，因此如果我们需要使用的文字在其他Font Asset中，就需要切换Font Asset，但是如果一段文本中的字分别存在不同的Font Asset中，这时候怎么办，</p>
<p>TextMeshPro使用Fallback机制解决了这个问题</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Fallback%E6%9C%BA%E5%88%B6/1.png?raw=true" alt="img"></p>
<p>在每个Font Asset下面都有一个Fallback Font Asset，只需要将其他的Font Asset添加到列表中，如果输入的文字不在当前引用的Font Asset中，TextMeshPro就会自动去这些Font Asset中进行查找。</p>
<p>查找的顺序为：当前引用的Font Asset - 当前引用Font Asset的Fallback Font Asset - 当前TextMeshProUGUI(即场景中的TextMeshUI)的Extra Setting中查找 - TMP Setting的Fallback中查找</p>
<p>→ TMP Setting 的 Default Sprite Asset - TMP Setting的Default Font Asset查找 - 如果还是没有，则显示TMPSetting 的Missing Glyphs</p>
<p>因此使用的时候，就需要在Font Asset跟Sprite Asset上挂载这些Fallback，以防止查找不到，显示为空的情况。</p>
]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro - Preset机制</title>
    <url>/2019/08/12/TextMeshPro/TextMeshPro-Preset%E9%A2%84%E8%AE%BE%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Material Preset 用于TextMeshPro的材质切换。材质用于不同的效果表现，比如描边、渐变等。</p>
<h2 id="创建-替换材质"><a href="#创建-替换材质" class="headerlink" title="创建/替换材质"></a>创建/替换材质</h2><p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/1.png?raw=true" alt="img"></p>
<p>如上图，可以看到每个Font Asset都存在一个材质跟一张贴图，这张是默认的材质，无法移动无法编辑。</p>
<ol>
<li>选中这张默认材质，Ctrl + D 拷贝一个副本，<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/2.png?raw=true" alt="img"></li>
<li>将材质移动到Assets/TextMeshPro/Resources/Materials/下。修改名称为MNJHK SDF - Outline，前面为Font Asset名称，以“-”分割，后面跟着的是效果名称，Outline表示描边</li>
<li>修改材质的shader为TextMeshPro/Mobile/Distance Field，如图：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/3.png?raw=true" alt="img"></li>
<li>勾选Outline选项，Color为描边颜色，Thickness为描边强度，调整这两个属性修改描边效果</li>
<li>在Hierarchy中选中需要描边效果的文本，在其Inspector中，可以看到其正在使用的材质：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/4.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/5.png?raw=true" alt="img"></li>
<li>将Inspector滑动到最底下，即可以看到材质：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/6.png?raw=true" alt="img"></li>
<li>将之前编辑好的描边的材质拖到红框中，就可以看到效果：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/7.png?raw=true" alt="img"></li>
</ol>
<p>替换前后效果：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/8.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/9.png?raw=true" alt="img"></p>
<p>使用之后，其Inspector的Material Preset中就会有拖入的材质，可以进行选择切换：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Material%20Preset%E6%9C%BA%E5%88%B6/10.png?raw=true" alt="img"></p>
<h2 id="代码更新材质"><a href="#代码更新材质" class="headerlink" title="代码更新材质"></a>代码更新材质</h2>]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro - Sprite Asset</title>
    <url>/2019/08/11/TextMeshPro/TextMeshPro-SpriteAsset/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>图集一张，图集必须要是Sprite（2D and UI）,SpriteMode 必须为Multiple，并在Sprite Editor中切好。图集对应的Json文件一个配置参考下图：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/1.png?raw=true" alt="img"></p>
<p>法1：</p>
<p>Windows - TextMeshPro - Sprite Importer:</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/2.png?raw=true" alt="img"></p>
<p>将准备好的Json文件拖入Sprite Date Source，然后将图集拖入SpriteTexture Atlas，Import Format选择TexturePacker</p>
<p>点击Create Sprite Asset即可，点击保存</p>
<p>法2：</p>
<p>选中图集，右键 - Create - Text Mesh Pro - Sprite Asset，自动生成Sprite Asset</p>
<p>生成以后面板如下：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/3.png?raw=true" alt="img"></p>
<p>Sprite Character Table 为精灵的列表，记录了精灵的ID、Name、Unicode等参数，Sprite Glyph Table为字形列表，定义了元素的裁切、位置跟偏移等信息，Previous Page 跟 Next Page可以进行切页，</p>
<p>点击SpriteCharacter Table中的元素，会变为对应图片的Glyph操作面板，可以操作单个图片的偏移等数据，如果需要统一操作，可以在Sprite Glyph Table的最底下看到Global操作，修改值将会同步到所有的</p>
<p>精灵图片</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/4.png?raw=true" alt="img"></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>一旦添加跟删除Sprite，Sprite Asset对应的Texture贴图必然会发生改变，那么如何更新Sprite Asset呢？</p>
<p>选中需要更新的Sprite Asset，将其Inspector面板拉取到最顶端，点击右上角的齿轮按钮，在弹出的窗口中点击“Update Sprite Asset”，就会更新新增的图素到这个Sprite Asset中</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/5.png?raw=true" alt="img"></p>
<h3 id="颜色修改"><a href="#颜色修改" class="headerlink" title="颜色修改"></a>颜色修改</h3><p>Sprite Asset默认时不参与组件的颜色变化，即如果是图文混排，那么直接修改Text的color变化，图素并不会跟着更改，那么怎么同步修改呢？</p>
<ul>
<li>tint 色调</li>
</ul>
<p><sprite index="0" tint="1">真棒！ tint值为0时不参与文本颜色（包括alpha）变化，为1时参与颜色变化</sprite></p>
<p>tint=0时：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/6.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/7.png?raw=true" alt="img"></p>
<p>tint=1时：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/8.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/9.png?raw=true" alt="img"></p>
<p>那么如果只是需要对图素Sprite进行颜色修改呢？使用color标签</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/10.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/11.png?raw=true" alt="img"></p>
<p>如果想要同时参与文本的Alpha修改又保持图素的颜色，则可以color与tint同时使用：</p>
<p>alpha修改：<img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/12.png?raw=true" alt="img"><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/13.png?raw=true" alt="img"></p>
<p>这种方式，需要谨慎，如果只有Alpha调整是没有关系的，但是一旦涉及到颜色的变化，那么图素由于不是白色，颜色的变化就会很诡异，大概就是只有在白色上面绘制颜色才是正常的颜色。</p>
<h3 id="使用-Tag标签"><a href="#使用-Tag标签" class="headerlink" title="使用 Tag标签"></a>使用 Tag标签</h3><p>在场景中创建Create - UI - TextMeshPro UI</p>
<p>在输入框中输入对应的文本即可</p>
<ul>
<li>sprite 标签</li>
</ul>
<p>&lt;sprite=0&gt; 或者<sprite index="0">  直接显示index为0的图素  </sprite></p>
<p>当然这里显示的只是TMP Setting中默认的Sprite Asset中的图素，默认Sprite Asset中不存在的，是没有的，设置如下图：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/14.png?raw=true" alt="img"></p>
<p>如果默认的Sprite Asset添加了Fallback Sprite Asset，如下图：</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/Sprite%20Assets/15.png?raw=true" alt="img"></p>
<p>用index也是找不到的，需要使用name来查找</p>
<p><sprite name="ham_1"> 可以找到两个Sprite Asset中name为“ham_1”的图素，先去默认的Sprite Asset，也就是Common中查找，没有的话再去Ham中查找，还没有的话，gg，不显示</sprite></p>
<p>如果没有添加Fallback Sprite Asset的话，使用name只会查找默认Sprite Asset即Common中的图素Sprite，因此需要添加Sprite Asset名称来告诉TMP去哪里查找：</p>
<p>&lt;sprite=”Ham” index=0&gt;  这样会去名称为”Ham“的Sprite Asset中查找index为0的图素Sprite</p>
<p>同样的：&lt;sprite=”Ham” name=”ham_1”，同样会去名称为”Ham“的Sprite中查找name为”ham_1”的图素Sprite</p>
<p>区别在于，使用name的时候，即使定义了去Ham中查找，但是如果其Fallback Sprite Asset中存在其他引用，也会接着找下去，</p>
<p>也就是说，Common的Fallback Sprite Asset添加了Ham，那么此时&lt;sprite=”Common” name=”hum_1”&gt; 跟 &lt;sprite=”Ham” name=”ham_1” 是等价的，因为在Common中找不到，会去其Fallback Sprite Asset中查找</p>
<p>其他标签参考地址：<a href="http://digitalnativestudios.com/textmeshpro/docs/rich-text/#sprite" target="_blank" rel="noopener">http://digitalnativestudios.com/textmeshpro/docs/rich-text/#sprite</a></p>
]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro - Font Asset</title>
    <url>/2019/08/10/TextMeshPro/TextMeshPro-Font%20Asset/</url>
    <content><![CDATA[<p>Font Asset是TextMeshPro渲染字体的主要资源文件，TextMeshPro渲染字体采用的是贴图渲染，因此需要将所有的文字都渲染为一张Font Asset进行使用</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>需要原生字体（Font）一个、保存着中文的txt文件一个</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/FontAssets/1.png?raw=true" alt="img"></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="静态Font-Asset："><a href="#静态Font-Asset：" class="headerlink" title="静态Font Asset："></a>静态Font Asset：</h3><p>打开Winddows - TextMeshPro - Font Asset Creator，打开创建面板</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/FontAssets/2.png?raw=true" alt="img"></p>
<p>将准备好的字体拖入Source Font File中，Sampling Point Size 是每个元素的大小，选择Auto Sizing即可。Auto Sizing会自动填满整张贴图且不会丢失，除非实在放不下。</p>
<p>Padding是每个元素之间的间隔，这个保持9-12，对字体特效影响比较大</p>
<p>PackingMethod为打包方法，Fast为快捷方式，Otl为最优，开发时选择fast，出包选择Otl。</p>
<p>Atlas Resolution为渲染出来的贴图的大小，越大越清晰，建议不要超过2048，资源超大，打包也超慢</p>
<p>Character Set，这是打包的资源类型选择，是TextMeshPro内置的，里面有多种选项</p>
<p>​      ASCII 只打包ASCII的元素</p>
<p>​      ASCII Extension  </p>
<p>​      Charactor from File  中文需要选择这个，从文件中导入</p>
<p>RenderMode，渲染模式，开发选择ADFAA，出包选择SDF16</p>
<p>Get kerning Pairs 不要问，问也不清楚</p>
<p>最后点击 Generate Font Asset 进行生成</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/FontAssets/3.png?raw=true" alt="img"></p>
<p>左边的红框中是结果，Missing characters表示丢失了多少个字，下面是丢失的列表，这些是无法打入的，可能需要删除或者重新打包</p>
<p>右边的红框是生成的贴图预览，一堆点表示原始文本里面有很多点，不合格，需要删除这些点</p>
<p>最后点击Save/SaveAs进行保存，Save是覆盖，Save As 是另存为</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/FontAssets/4.png?raw=true" alt="img"></p>
<p>生成之后使用请看：<a href="https://stl.woobest.com/wiki/pages/viewpage.action?pageId=58759620" target="_blank" rel="noopener">8. TextMesh使用流程</a></p>
<h3 id="动态Font-Asset："><a href="#动态Font-Asset：" class="headerlink" title="动态Font Asset："></a>动态Font Asset：</h3><p>选中准备好的字体Font，然后右键Create - TextMeshPro - Font Asset，会生成一个以Font为格式的空Font Asset文件</p>
<p><img src="https://github.com/chenyunxiong/chenyunxiong.github.io/blob/master/img/TextMeshPro/FontAssets/5.png?raw=true" alt="img"></p>
<p>可以看到这张Font Asset的Atlas Population Mode为Dynamic，即动态的，动态的意思为此Font Asset为空，用以保存玩家或者服务器的不确定输入</p>
<h3 id="静态跟动态Font-Asset"><a href="#静态跟动态Font-Asset" class="headerlink" title="静态跟动态Font Asset"></a>静态跟动态Font Asset</h3><p>静态贴图只能通过生成来更新贴图的内容，而动态贴图则可以在游戏过程中进行输入跟更新贴图内容，</p>
<p>这种方式的优势在于，如果遇到不确定的输入文本，需要进行显示的时候，静态Font Asset中没有，则无法显示，</p>
<p>而动态Font Asset就可以解决这个问题，比如玩家起名之类的地方，无法预测需要显示的东西，则可以使用动态Font  Asset</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在场景中创建Create - UI - TextMeshPro UI</p>
<p>在输入框中输入对应的文本即可</p>
]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>TextMeshPro介绍</title>
    <url>/2019/08/09/TextMeshPro/TextMeshPro%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<ol>
<li>TextMesh介绍</li>
</ol>
<p>转至元数据起始<br>TextMeshPro原来是一款Unity字体插件，由于其优异的字体渲染跟字体特效表现方式，从2018.3以后正式引入Unity的资源包，可以通过Window - PackageManager面板进行查看跟引入当前TextMeshPro的版本</p>
<p>TextMeshPro支持图文混排，只需要创建对应的Sprite Asset，就可以进行丰富的图文混排，可以满足大部分的需求</p>
<p>TextMeshPro主要分为：Font Asset（字体资源，显示文字使用）、Sprite Asset（精灵图集，显示图片使用）、Font/Sprite Fallback（资源查找，用于各个资源之间的连接）、Material Preset（材质设置，用于字体特效）</p>
<p>Unity地址：</p>
<p>教程地址：<a href="https://www.youtube.com/user/Zolran/videos" target="_blank" rel="noopener">https://www.youtube.com/user/Zolran/videos</a></p>
<p><a href="https://www.bilibili.com/video/av45212703/" target="_blank" rel="noopener">https://www.bilibili.com/video/av45212703/</a></p>
]]></content>
      <tags>
        <tag>TextMeshPro</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2019/07/10/%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>每次比较两个相邻的元素，如果顺序错误则交换，一趟结束只能将一个数归位，给入的数组有多长就需要循环多少趟</p>
<p>例如 [4, 2, 6, 3, 1] 按从大到小排序，则顺序为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">输入</th>
<th style="text-align:center">4</th>
<th style="text-align:center">2</th>
<th style="text-align:center">6</th>
<th style="text-align:center">3</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第一趟</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">第二趟</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">第三趟</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">第四趟</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">第五趟</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>从右往左，每一趟确定一个最小值，第一趟是1，第二趟是2，第三趟是3，第四趟是4，第五趟是6，这样五趟完成以后，整个排序就结束了。</p>
<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] list = &#123;1, 3, 2, 6, 4, 7&#125;;</span><br><span class="line">int value = list[0];</span><br><span class="line">            </span><br><span class="line">for (int i = 0; i &lt; list.Length; i++)&#123;</span><br><span class="line">    // Console.WriteLine(&quot; i: &quot; + list[i]);</span><br><span class="line">    value = list[i];</span><br><span class="line">    for (int j = 0; j &lt; list.Length; j++)&#123;</span><br><span class="line">        if(list[i] &gt; list[j]) &#123;</span><br><span class="line">        	value = list[j];</span><br><span class="line">        	list[j] = list[i];</span><br><span class="line">        	list[i] = value;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; list.Length; i++)&#123;</span><br><span class="line">    Console.WriteLine(&quot;index:&#123;0&#125;: &#123;1&#125; &quot;, i, list[i]);  // 输出7，6，4，3，2，1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出来，冒泡排序很明显的问题是：</p>
<ol>
<li>for循环的嵌套，使得其时间复杂度为 $O(N^2)​$</li>
<li>有可能已经提前拍好序了，但是还是继续循环下去直至结束</li>
</ol>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2019/07/05/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序采用二分法进行排序，先选择一个基数，这个基数一般是数组下标为0的数，然后从数组尾巴开始往前比较，如果存在一个数小于基数，则停止查找，然后从数组头部开始查找，如果存在一个数大于基数则停止查找，然后交换这两个数的位置。重复比较跟交换直到头尾两个位置重合，最后将基数与最终的交叉点的数字位置交换，表示一轮排序结束。</p>
<p>一轮结束并不代表这些数字已经排序完成，只表示以基数为中心，基数左边的数字必然小于基数，基数右边的必然大于基数，但是基数左边跟基数右边的数字并不一定是拍好的，这时就需要重新定义基数，分别对左边跟右边的数进行排序，如此反复，则最后到没有数字可以遍历时结束，此时，数组必然是有序的</p>
<p>可见，这是一个不断深入的相同的重复的操作，这种操作可以用递归来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void quickSort(int left, int right, int[] list)&#123;</span><br><span class="line">    int i, j, temp;</span><br><span class="line">    i = left;</span><br><span class="line">    j = right;</span><br><span class="line">    if(i &gt; j) return;</span><br><span class="line">    // Console.WriteLine(&quot;.....length: &#123;0&#125;-&#123;1&#125;&quot;, left, right);</span><br><span class="line">    temp = list[left];</span><br><span class="line">    while(i != j)&#123;                </span><br><span class="line">         while(list[j] &gt;= temp &amp;&amp; i &lt; j)&#123;</span><br><span class="line">              j --;</span><br><span class="line">         &#125;</span><br><span class="line">         while(list[i] &lt;= temp &amp;&amp; i &lt; j)&#123;</span><br><span class="line">              i ++;</span><br><span class="line">         &#125;</span><br><span class="line">         if(i &lt; j)&#123;</span><br><span class="line">              int t = list[i];</span><br><span class="line">              list[i] = list[j];</span><br><span class="line">              list[j] = t;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   list[left] = list[i];</span><br><span class="line">   list[i] = temp;</span><br><span class="line"></span><br><span class="line">   string s = &quot;&quot;;</span><br><span class="line">   for (int k = 0; k &lt; list.Length; k++)&#123;</span><br><span class="line">        s += list[k];</span><br><span class="line">        s += &quot;_&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   Console.WriteLine(&quot;.......i: &#123;0&#125;:&#123;1&#125;:&#123;2&#125;:&#123;3&#125;&quot;, s, left, right, temp);</span><br><span class="line"></span><br><span class="line">   quickSort(left, i - 1, list);</span><br><span class="line">   quickSort(i+1, right, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">     int[] list = &#123;1, 45, 4, 7&#125;;</span><br><span class="line">     quickSort(0, list.Length - 1, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上的代码，快速排序的过程为：（一行表示一次排序结束）</p>
<table>
<thead>
<tr>
<th>下标0</th>
<th>下标0</th>
<th>下标0</th>
<th>下标0</th>
<th>left</th>
<th>right</th>
<th>temp基数</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>45</td>
<td>4</td>
<td>7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>7</td>
<td>4</td>
<td>45</td>
<td>1</td>
<td>3</td>
<td>45</td>
</tr>
<tr>
<td>1</td>
<td>7</td>
<td>7</td>
<td>45</td>
<td>1</td>
<td>2</td>
<td>7</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>7</td>
<td>45</td>
<td>1</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>门面模式（Facade）</title>
    <url>/2019/05/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="门面模式（Facade）"><a href="#门面模式（Facade）" class="headerlink" title="门面模式（Facade）"></a>门面模式（Facade）</h3><p>门面模式顾名思义就是一个统一对外的门面，而不需要知道门面内部的实现。它可以是子系统对外的统一入口，也可以是</p>
<p>门面模式其实就是一个管理中心，管理其他类的统一入口，或者管理其他关联类的入口。游戏中经常有各种管理器，这些基本上都是属于门面模式的运用。比如最常见的Manager框架（也就是各种Manager控制器）中的页面管理器，包含了所有的页面的引用，需要调用页面脚本的时候，通过这个管理器进行调用，而不是直接调用页面脚本。</p>
<p>作为关联类入口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace VSCode&#123;</span><br><span class="line">    class MenuPage&#123;</span><br><span class="line">        public void Name()&#123;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class LoginPage&#123;&#125;</span><br><span class="line">    class BackPakePage&#123;&#125;</span><br><span class="line"></span><br><span class="line">    class PageManager&#123;</span><br><span class="line">        MenuPage menuPage = new MenuPage();</span><br><span class="line">        LoginPage loginPage = new LoginPage();</span><br><span class="line">        BackPakePage backPakePage = new BackPakePage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PageManager就是页面的门面，调用的时候，直接使用PageManager调用menuPage、loginPage跟backPackPage，一般情况下，PageManager是单例模式，这样便于调用同时保证游戏中只有一个控制器。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式（Factory）</title>
    <url>/2019/05/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="工厂模式（Factory）"><a href="#工厂模式（Factory）" class="headerlink" title="工厂模式（Factory）"></a>工厂模式（Factory）</h3><p>都知道流水线是近代工业的重大突破，使得生产效率大幅度提高。工厂模式的作用也是如此。一般来说，我们平常用到某个类，直接new一个就可以了。但是特殊情况下，我们不确定需要哪个类，或者存在多个同类型的类比如任务、车、游戏中的基础数据类比如资源、道具等这些类的时候，就可能用到工厂模式。</p>
<p>它可以直接返回我们需要的类的实例，而不需要我们去考虑中间的各种转换跟弯弯，这些逻辑都写在了工厂内部，使用的时候直接传递一个或者多个具有唯一标识的信息，工厂就可以返回我们需要的类的实例。这就是其方便之处。</p>
<p>工厂模式同样也存在多种实现方式，最简单的就是直接通过逻辑判断然后返回需要的类：</p>
<h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Factory(string type)&#123;</span><br><span class="line">    if(type == &quot;prop&quot;)&#123;</span><br><span class="line">        // create prop 创建道具</span><br><span class="line">    &#125;</span><br><span class="line">    else if(type == &quot;resource&quot;)&#123;</span><br><span class="line">        // create resource //创建资源</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch(type)&#123;</span><br><span class="line">        case &quot;prop&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            // create prop 创建道具</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">        case &quot;resources&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            // create resource //创建资源</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单工厂直接以逻辑判断做处理，直接生成对应的实例，当然，之际情况下，不会使用string作为判断依据，每个游戏中都有对应的数据类的唯一标识符，通过标识符辨别需要生成哪种类型的实例。</p>
<h4 id="接口-抽象类"><a href="#接口-抽象类" class="headerlink" title="接口/抽象类"></a>接口/抽象类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace VSCode&#123;</span><br><span class="line">    interface IFactor</span><br><span class="line">    &#123;</span><br><span class="line">        void Name();</span><br><span class="line">        void GetType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class FactoryA : IFactor</span><br><span class="line">    &#123;</span><br><span class="line">        void IFactor.GetType()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void IFactor.Name()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class FactoryB : IFactor</span><br><span class="line">    &#123;</span><br><span class="line">        void IFactor.GetType()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void IFactor.Name()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class NullFactory : IFactor</span><br><span class="line">    &#123;</span><br><span class="line">        public void Name()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void IFactor.GetType()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new System.NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class  Factory &#123;</span><br><span class="line">        public static IFactor FactoryCreateItem(string type)&#123;            </span><br><span class="line">            if(type == &quot;A&quot;)&#123;</span><br><span class="line">                return new FactoryA();</span><br><span class="line">            &#125;</span><br><span class="line">            else if(type == &quot;B&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                return new FactoryB();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                return new NullFactory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口/抽象类则复杂一些，因为生成都都是同一类型的不同类，因此，直接将相同的部分抽象到接口或者抽象类中，然后不同的类型继承并重写。然后将创建方式写在一块，使用的时候，直接调用并传入需要的参数就可以获得需要的类的实例</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式（Observer）</title>
    <url>/2019/05/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a>观察者模式（Observer）</h3><p>观察者模式的主要作用是用于解耦，是一种一对多的关系。多个观察者同时监听一个数据或者对象状态，当这个数据或者对象状态变化的时候，通知所有的观察者，进而所有的观察者做出对应的响应。</p>
<p>举个例子，游戏中一般都有货币系统，当同时多个地方需要显示货币数量，而又不在一个页面，且又需要进行刷新的时候，这时候一个一个去通知刷新是很难受的，而且会有很严重的耦合。而观察者模式能完美的解决这个问题。</p>
<p>观察者模式有多种不同的实现方式，看项目或者个人需要。这里说两种实现方式：</p>
<h4 id="抽象模式"><a href="#抽象模式" class="headerlink" title="抽象模式"></a>抽象模式</h4><p>抽象模式多使用与框架中，比如PureMVC整个框架的消息机制就使用了抽象模式。</p>
<p>抽象模式通常需要一个中介，也就是一个控制类，它保存着所有的订阅者跟订阅者所对应的事件ID。然后定义一个抽象类或者接口，将需要的方法抽象进这个接口或者抽象类中，供其他类进行继承。继承者重写各自的接受消息的方法。</p>
<p>使用的时候，订阅者通过中介订阅事件，其他类告诉中介应该通知哪些消息，然后中介内部自动分发对应的订阅者。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace VSCode&#123;</span><br><span class="line">    interface IObserver    </span><br><span class="line">    &#123;</span><br><span class="line">        void Receive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ObserverA : IObserver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Receive()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;A&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ObserverB : IObserver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Receive()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;B&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class MessageCtrl&#123;</span><br><span class="line">        public static Dictionary&lt;string, IObserver&gt; observerDict = new Dictionary&lt;string, IObserver&gt;();</span><br><span class="line">        public static void Add(string type, IObserver ob)&#123;</span><br><span class="line">            if(!observerDict.ContainsKey(type))&#123;</span><br><span class="line">                observerDict.Add(type, ob);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Remove(string type, IObserver ob)&#123;</span><br><span class="line">            if(observerDict.ContainsKey(type))&#123;</span><br><span class="line">                observerDict.Remove(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Dispatch(string type)&#123;</span><br><span class="line">            if(observerDict.ContainsKey(type))&#123;</span><br><span class="line">                observerDict[type].Receive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Main&#123;</span><br><span class="line">        public void Create()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="事件-委托模式"><a href="#事件-委托模式" class="headerlink" title="事件/委托模式"></a>事件/委托模式</h4><p>事件/委托类型则简单许多，因为事件跟委托本身就支持一对多的关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int count = 0;</span><br><span class="line">static int Count&#123;</span><br><span class="line">    set&#123;</span><br><span class="line">            count = value;</span><br><span class="line">            Event_Currency_Count_Changed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    private static Action Event_Currency_Count_Changed;</span><br><span class="line">    static void RefreshCurrencyImage()&#123;</span><br><span class="line">        Console.WriteLine(&quot;RefreshCurrencyImage&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void RefreshCurrencyCount()&#123;</span><br><span class="line">        Console.WriteLine(&quot;RefreshCurrencyCount&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void EventObserver()&#123;</span><br><span class="line">        Event_Currency_Count_Changed += RefreshCurrencyCount;</span><br><span class="line">        Event_Currency_Count_Changed += RefreshCurrencyImage;</span><br><span class="line"></span><br><span class="line">        Count = 10;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Count 属性中直接调用了Event_Currency_Count_Changed 事件，在EventObserver中两个方法订阅了这个事件，当Count改变时，就会通知Event_Currency_Count_Changed，进而通知 RefreshCurrencyImage()、RefreshCurrencyCount()，这样金币数量改变的时候，就会刷新金币数量的显示跟金币图标的显示。这里只是做个示范，简单的刷新同一个类内的方法，更大的意义是其他类订阅这个事件，然后就可以刷新其他类的方法，以达到实现解耦的作用。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>NGUI渲染流程</title>
    <url>/2019/04/09/NGUI/NGUI-%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h3 id="NGUI渲染流程"><a href="#NGUI渲染流程" class="headerlink" title="NGUI渲染流程"></a>NGUI渲染流程</h3><p>NGUI是以 <em>depth</em> 的参数控制各个 <em>UIWidget</em> 的前后关系的。所有继承自 <em>UIWidget</em> 的包括 <em>UISprite</em> 、 <em>UILabel</em> 等这些继承自 <em>UIWidget</em> 的组件（为方便，下方说到 <em>UIWidget</em> 包括UISprite等继承自 <em>UIWidget</em> 的类），<em>UIPanel</em> 也有 <em>depth</em>，UIPanel是调整整个Panel与Panel之间的层级关系。而UIWidget的depth是调整UIWidget之间的层级关系。首先我们看UIWidget的<em>depth</em>的 set 代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set&#123;</span><br><span class="line">    if (mDepth != value) &#123;</span><br><span class="line">	if (panel != null) panel.RemoveWidget(this);</span><br><span class="line">	mDepth = value;</span><br><span class="line">	if (panel != null)&#123;</span><br><span class="line">	    panel.AddWidget(this);</span><br><span class="line">	    if (!Application.isPlaying)&#123;</span><br><span class="line">	    panel.SortWidgets();</span><br><span class="line">	    panel.RebuildAllDrawCalls();</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">	NGUITools.SetDirty(this);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可看出一旦 <em>UIWidget</em> 的 <em>depth</em> 变化以后，<em>UIWidget</em> 所属的 <em>UIPanel</em> 会更新保存的 <em>UIWidget</em> 列表（先删除后插入），这是因为UIPanel中的UIWiidget顺序影响到渲染先后顺序。关于 <em>UIPanel</em> 可参考《UIPanel》。</p>
<p>UIPanel 保存了子节点下的所有UIWidget元素，这里 <em>depth</em> 变化以后，进行了删除跟插入操作。而这个删除跟增加UIwidget 也干了一堆事，且看：</p>
<ol>
<li><p>RemoveWidget()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void RemoveWidget (UIWidget w) &#123;</span><br><span class="line">	if (widgets.Remove(w) &amp;&amp; w.drawCall != null) &#123;</span><br><span class="line">	    int depth = w.depth;</span><br><span class="line">	    if (depth == w.drawCall.depthStart || depth == w.drawCall.depthEnd)</span><br><span class="line">	    mRebuild = true;</span><br><span class="line">	    w.drawCall.isDirty = true;</span><br><span class="line">	    w.drawCall = null;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦满足条件则将 <em>mRebuilt</em> 值设置为 true，在UIPanel的 <em>LateUpdate()</em> 方法中，会遍历所有的UIPanel并更新新每个UIPanel的UIWidget跟DrawCall。而一旦 <em>mRebuild</em> 为true以后，会重新构建全部的DrawCall</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (mRebuild)&#123;</span><br><span class="line">	mRebuild = false;</span><br><span class="line">	FillAllDrawCalls();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AddWidget()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void AddWidget (UIWidget w) &#123;        </span><br><span class="line">	... 省略一堆插入代码</span><br><span class="line">	FindDrawCall(w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>插入一个新的 <em>UIWidget</em> 必然会调用一次 <em>FindDrawCall()</em> 方法，根据 <em>UIWidget</em> 的 <em>depth</em> 将新插入的 <em>UIWidget</em> 放入到合适的 DrawCall 中。</p>
<ol start="3">
<li>FindDrawCall()</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   public UIDrawCall FindDrawCall (UIWidget w)&#123;</span><br><span class="line">       .... //省略部分</span><br><span class="line">       for (int i = 0; i &lt; drawCalls.Count; ++i)&#123;</span><br><span class="line">           UIDrawCall dc = drawCalls[i];</span><br><span class="line">   	   int dcStart = (i == 0) ? int.MinValue : drawCalls[i - 1].depthEnd + 1;</span><br><span class="line">   	   int dcEnd = (i + 1 == drawCalls.Count) ? int.MaxValue : drawCalls[i + 1].depthStart - 1;</span><br><span class="line">   	   if (dcStart &lt;= depth &amp;&amp; dcEnd &gt;= depth) &#123;</span><br><span class="line">   	       if (dc.baseMaterial == mat &amp;&amp; dc.shader == shader &amp;&amp; dc.mainTexture == tex) &#123;</span><br><span class="line">   	           if (w.isVisible)&#123;</span><br><span class="line">   		       w.drawCall = dc;</span><br><span class="line">   		       if (w.hasVertices) dc.isDirty = true;</span><br><span class="line">   		           return dc;</span><br><span class="line">   		   &#125;</span><br><span class="line">   	       &#125;</span><br><span class="line">   	       else mRebuild = true;</span><br><span class="line">   	       return null;</span><br><span class="line">   	   &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     mRebuild = true;</span><br><span class="line">     return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历所属 <em>UIPanel</em> 所有的 <em>DrawCall</em>，如果当前 <em>UIWidget</em> 的 <em>depth</em> 在其中一个 drawCall的范围之内，则将此DrawCall赋值给当前 <em>UIWidget</em></p>
<p>以上可知：增删 <em>UIWidget</em> 以后，UIPanel 保存的 UIDrawCall 跟 widgets list 都会跟着刷新一遍。那么什么情况下会有<em>UIWidget</em> 增删操作呢。有两种：</p>
<ol>
<li><p>新建 <em>UIWidget</em> </p>
<p>由于 <em>UIWidget</em> 都使用了[ExecuteInEditMode] 特性（在每个类的顶部），这个特性的作用是在Editor模式（编辑模式）下能够运行。因此我们新建 <em>UIWidget</em> 的时候，Awake()、 Start()、Update()等这些方法会自动调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void Start ()&#123; // 在父类 UIRect.cs 中</span><br><span class="line">	mStarted = true;</span><br><span class="line">	OnInit();</span><br><span class="line">	OnStart();</span><br><span class="line">&#125;</span><br><span class="line">protected override void OnInit ()&#123;</span><br><span class="line">    ...</span><br><span class="line">    RemoveFromPanel();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">protected override void OnStart ()&#123;</span><br><span class="line">    ...</span><br><span class="line">    CreatePanel();</span><br><span class="line">&#125;</span><br><span class="line">public UIPanel CreatePanel ()&#123;</span><br><span class="line">    ...</span><br><span class="line">    panel.AddWidget(this);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Start() 方法写在父类 <em>UIRect.cs</em> 中, 里面会调用两个方法 <em>OnInit()</em>、<em>OnStart</em>，最后都有增删操作</p>
</li>
<li><p>更改已有的 <em>UIWidget</em> 的 <em>depth</em></p>
<p>更改 <em>depth</em> 的过程就是上面的流程，最终也会有增删操作</p>
</li>
</ol>
<p>UIPanel的静态变量 <em>list</em> 保存了当前所有激活状态的UIPanel。在UIPanel的LateUpdate方法中，遍历 <em>list</em> 并调用每个UIPanel自己的 <em>UpdateSelf()</em> 方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void UpdateSelf ()&#123;</span><br><span class="line">	mHasMoved = cachedTransform.hasChanged;</span><br><span class="line">	UpdateTransformMatrix();</span><br><span class="line">	UpdateLayers();</span><br><span class="line">	UpdateWidgets();</span><br><span class="line">	if (mRebuild)&#123;</span><br><span class="line">		mRebuild = false;</span><br><span class="line">		FillAllDrawCalls();</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;  ... &#125; // 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UpdataLayer() 是保证UIPanel下的 <em>UIWidget</em> 的Layer都跟UIPanel保持一致。</p>
<p>UpdateWidgets() 是刷新UIPanel下的可见 <em>UIWidget</em> 的位置信息，并将数据更新到 <em>UIWidget</em> 对应的 <em>UIGeometry</em> 中。<em>UIGeometry</em> 是 <em>UIWidget</em> 的数据类，每个 <em>UIWidget</em> 都存在一个对应的 <em>UIGeometry</em>，保存了<em>UIWidget</em> 的顶点、UV、颜色数据，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void UpdateWidgets()&#123;</span><br><span class="line">    for (int i = 0, imax = widgets.Count; i &lt; imax; ++i)&#123;</span><br><span class="line">	UIWidget w = widgets[i];</span><br><span class="line">	... 省略</span><br><span class="line">	if (w.UpdateTransform(frame) || mResized || (mHasMoved &amp;&amp; !alwaysOnScreen))&#123;</span><br><span class="line">        ... 省略</span><br><span class="line">	&#125;</span><br><span class="line">	if (w.UpdateGeometry(frame))&#123;</span><br><span class="line">	    if (!mRebuild) &#123;</span><br><span class="line">		... 省略</span><br><span class="line">		if (w.drawCall != null) w.drawCall.isDirty = true;</span><br><span class="line">		else FindDrawCall(w);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...  省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UpdageWigets() 刷新每个 <em>UIWidget</em> 的 <em>Geometry</em> 的顶点、UV、颜色数据，同时如果mBuild为false， 则更新 <em>UIWidget</em> 的DrwaCall。</p>
<p>继而就是 FillAllDrawCalls() 方法，这个方法销毁再重建对应UIPanel下的所有DrawCall，并将每个<em>UIWidget</em> 下面的 <em>Geometry</em>  数据传入DrawCall 中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void FillAllDrawCalls ()&#123;</span><br><span class="line">    for (int i = 0; i &lt; drawCalls.Count; ++i) // 清空所有旧drawcall</span><br><span class="line">		UIDrawCall.Destroy(drawCalls[i]);</span><br><span class="line">	drawCalls.Clear();</span><br><span class="line">	...</span><br><span class="line">	if (mSortWidgets) SortWidgets(); // 按照widget的depth大小重新排序所有widgets</span><br><span class="line">	for (int i = 0; i &lt; widgets.Count; ++i)&#123;</span><br><span class="line">	    ...</span><br><span class="line">	    if (dc == null)&#123; // 没有对应的则新增drawcall</span><br><span class="line">                dc = UIDrawCall.Create(this, mat, tex, sdr);</span><br><span class="line">		dc.depthStart = w.depth;</span><br><span class="line">		dc.depthEnd = dc.depthStart;</span><br><span class="line">		...</span><br><span class="line">	    &#125;</span><br><span class="line">	    else&#123; // 没有对应的drawcall 则更新drawcall的depth范围</span><br><span class="line">                int rd = w.depth;</span><br><span class="line">		if (rd &lt; dc.depthStart) dc.depthStart = rd;</span><br><span class="line">		if (rd &gt; dc.depthEnd) dc.depthEnd = rd;</span><br><span class="line">	    &#125;		</span><br><span class="line">            w.drawCall = dc;</span><br><span class="line">	    ++count; // 当前drawcall的widget个数</span><br><span class="line">	    if (generateNormals) w.WriteToBuffers(dc.verts, dc.uvs, dc.cols, dc.norms, dc.tans, 			generateUV2 ? dc.uv2 : null); // 更新drawcall的顶点、uv等数据</span><br><span class="line">	    else w.WriteToBuffers(dc.verts, dc.uvs, dc.cols, null, null, generateUV2 ? dc.uv2 : null);</span><br><span class="line">	    ...</span><br><span class="line">	&#125;</span><br><span class="line">	// 新增drawcall -&gt; </span><br><span class="line">	if (dc != null &amp;&amp; dc.verts.Count != 0)&#123;</span><br><span class="line">            drawCalls.Add(dc);</span><br><span class="line">	    dc.UpdateGeometry(count); // count为当前drawcall的widget个数 更新drawcall的数据，并渲染（包括材质、贴图、shader）</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的脚本主要做了几件事：</p>
<ol>
<li>删除当前UIPanel旧的所有drawcall</li>
<li>排序当前UIPanel的所有子 <em>UIWidget</em></li>
<li>根据 <em>UIWidget</em> 的 <em>depth</em> 创建和更新 DrawCall</li>
<li>所有DrawCall更新uv、法线、材质 等数据</li>
<li>UIDrawCall.OnWillRenderObject () 渲染UIDrawCall</li>
</ol>
<p>UIDrawCall.UpdateGeometry() 更新了UIDrawCall 的材质、贴图、shader等数据，然后UIDrawCall.OnWillRenderObject ()自动调用渲染</p>
<h4 id="渲染先后关系"><a href="#渲染先后关系" class="headerlink" title="渲染先后关系"></a>渲染先后关系</h4><h5 id="UIPanel内部"><a href="#UIPanel内部" class="headerlink" title="UIPanel内部"></a>UIPanel内部</h5><p>由上面的分析可知，UIPanel内部的 <em>UIWidget</em> 的先后顺序是由对应的 <em>UIDrawCall</em> 决定的</p>
<p>而 <em>UIDrawCall</em> 的最终的渲染却是MeshFilter组件。也就是说，最终决定渲染先后的还是SortingLayerName、SortingOrder、RenderQueue这几个参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Material RebuildMaterial () &#123;</span><br><span class="line">	...</span><br><span class="line">	// Create a new material</span><br><span class="line">	CreateMaterial();</span><br><span class="line">	mDynamicMat.renderQueue = mRenderQueue;		</span><br><span class="line">	if (mRenderer != null)&#123; // Update the renderer		</span><br><span class="line">		mRenderer.sharedMaterials = new Material[] &#123; mDynamicMat &#125;;</span><br><span class="line">		mRenderer.sortingLayerName = mSortingLayerName;</span><br><span class="line">		mRenderer.sortingOrder = mSortingOrder;</span><br><span class="line">	&#125;</span><br><span class="line">	return mDynamicMat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UIDrawCall.UpdateGeometry() 中会走到 RebuildMaterial()，将UIDrawCall的SortingLayerName、SortingOrder、RenderQueue赋值给Rederer，而UIDrawCall的这些参数却是在 <em>UIPanel</em> 的 <em>LateUpdate()</em> 方法中更新的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void LateUpdate ()&#123;</span><br><span class="line">    ... </span><br><span class="line">    int rq = 3000;</span><br><span class="line">    for (int i = 0, imax = list.Count; i &lt; imax; ++i)&#123;</span><br><span class="line">        UIPanel p = list[i];</span><br><span class="line">       if (p.renderQueue == RenderQueue.Automatic)&#123;       		</span><br><span class="line">        	p.startingRenderQueue = rq;    // 更新起始renderqueue</span><br><span class="line">        	p.UpdateDrawCalls(i);</span><br><span class="line">		rq += p.drawCalls.Count;</span><br><span class="line">       &#125;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样在LateUpdate() 中，遍历了所有的UIPanel，并更新其起始RederQueue(p.startingRenderQueue)，然后在 UIDrawCall.UpdateDrawCalls()中更新了UIDrawCall的SortingLayerName、SortingOrder、RenderQueue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void UpdateDrawCalls (int sortOrder)&#123;</span><br><span class="line">    ...</span><br><span class="line">    for (int i = 0; i &lt; drawCalls.Count; ++i)&#123;</span><br><span class="line">        UIDrawCall dc = drawCalls[i];</span><br><span class="line">        ...</span><br><span class="line">        dc.renderQueue = (renderQueue == RenderQueue.Explicit) ? startingRenderQueue : startingRenderQueue + i;</span><br><span class="line">        dc.sortingOrder = useSortingOrder ? ((mSortingOrder == 0 &amp;&amp; renderQueue == RenderQueue.Automatic) ? sortOrder : mSortingOrder) : 0;</span><br><span class="line">	dc.sortingLayerName = useSortingOrder ? mSortingLayerName : null;</span><br><span class="line">	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SortingOrder跟SortingLayerName是否起作用取决于 <em>useSortingOrder</em> 变量，这个变量在UIPanel的Inspector面板上可以更改。”Advanced Options” 下方的”Sort Order”勾选框，勾选表示使用，反之则弃用。默认是弃用。</p>
<p>弃用的话，材质上的SortingLayerName会被赋值为默认层”Default”，而DrawCall的Rederer</p>
<p>因此在未勾选 <em>“Sort Order”</em> 时，同UIPanel下的UI元素，渲染的先后顺序只跟RenderQueue有关。而RenderQueue的大小是根据UIDrawCall的list遍历得来的。再往前推，UIDrawCall的顺序是由 <em>UIPanel</em> 中 <em>UIWidget</em> 的 <em>list</em> 的 <em>depth</em> 决定的。</p>
<p>这就是为什么修改 <em>UIWidget</em> 的 <em>depth</em> 可以调整其前后关系！（此前提到的 <em>UIWidget</em> 包括继承的类UILabel、UISprite之类）</p>
<h5 id="UIPanel之间"><a href="#UIPanel之间" class="headerlink" title="UIPanel之间"></a>UIPanel之间</h5><p>UIPanel也存在一个depth属性，修改depth没有<em>UIWidget</em>那么复杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int depth&#123;</span><br><span class="line">    ...</span><br><span class="line">    set&#123;</span><br><span class="line">        ...</span><br><span class="line">        ist.Sort(CompareFunc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static public int CompareFunc (UIPanel a, UIPanel b)&#123;</span><br><span class="line">    if (a != b &amp;&amp; a != null &amp;&amp; b != null)&#123;</span><br><span class="line">	if (a.mDepth &lt; b.mDepth) return -1;</span><br><span class="line">	if (a.mDepth &gt; b.mDepth) return 1;</span><br><span class="line">	    return (a.GetInstanceID() &lt; b.GetInstanceID()) ? -1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦UIPanel的 <em>depth</em> 改变，则重新排列所有的UIPanel的顺序，这样在 <em>LateUpdate()</em> 中遍历时顺序就变了，那么对应的RenderQueue也会变化，其底下的 <em>DrawCall</em> 跟 <em>UIWidget</em> 的RenderQueue也会跟着变化，这就实现了整个UIPanel下的 <em>UIWidget</em> 跟着变得原因</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="控制UIDrawCall数量"><a href="#控制UIDrawCall数量" class="headerlink" title="控制UIDrawCall数量"></a>控制UIDrawCall数量</h5><p>在新增 <em>UIWidget</em> 或者调整 <em>UIWidget</em> 的 <em>depth</em> 的时候，会刷新UIPanel的UIDrawCall，而是新增一个UIDrawCall 还是 将<em>UIWidget</em> 添加到已有的 UIDrawCall 中，是可以控制的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void FillAllDrawCalls ()&#123;</span><br><span class="line">    ...</span><br><span class="line">    if (mSortWidgets) SortWidgets();</span><br><span class="line">    for (int i = 0; i &lt; widgets.Count; ++i)&#123;</span><br><span class="line">        if (mat != mt || tex != tx || sdr != sd)&#123;  // 如果跟上一个widget的材质、贴图等不同</span><br><span class="line">            // 添加上一个widget到drawcall中</span><br><span class="line">        &#125;</span><br><span class="line">        if (mat != null || sdr != null || tex != null)&#123;</span><br><span class="line">            if (dc == null)&#123;</span><br><span class="line">                // 新建一个drawcall</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图可知，遍历UIPanel的 <em>UIWidget</em> 列表，一旦当前 <em>UIWidget</em> 的材质（mt / mat）、贴图（tex / tx）、shader（sdr / sd）跟上一个 <em>UIWidget</em> 的有所不同，则保存当前UIDrawCall 并 新建一个UIDrawCall 用以保存当前的 <em>UIWidget</em>。</p>
<p>因此，创建UI元素时，可采取方法减少不必要的DrawCall数量：</p>
<ol>
<li>同个图集的<em>UIWidget</em> 的 <em>depth</em> 尽量连续，所谓连续并不是不断开，而是不插入其他图集的<em>UIWidget</em></li>
<li>不同Shader的两个同样图集，depth也应该尽量不交叉</li>
</ol>
<p>一旦不同材质、贴图、shader的图集的两个 <em>UIWidget</em> 的 <em>depth</em> 进行交叉，那么就会以插入的 <em>depth</em> 为分界，生成三个DrawCall，这是不必要的</p>
<p>NGUI提供了 DrawCallTool 进行监控每个UIPanel上的DrawCall数量。在每个UIPanel的Inspector的底部有一个 <em>Show Draw Calls</em> 按钮，点击可以打开 DrawCallTool 面板。 里面列出了所有DrawCall 的 <em>UIWidget</em>，因此我们可以使用这个工具更好的搭建UI页面，在开发前期就控制好DrawCall，免得后期耗费大量人力调整</p>
]]></content>
      <tags>
        <tag>NGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>UIWrapContent</title>
    <url>/2019/04/03/NGUI/NGUI-WrapContent%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h3 id="UIWrapContent"><a href="#UIWrapContent" class="headerlink" title="UIWrapContent"></a>UIWrapContent</h3><p>游戏中不免有一些需要长列表的且需要滑动的页面，这也就导致如果不进行item的重复利用，会生成大量的item子节点，导致scrollview的计算量变得非常大，进而导致游戏卡顿等后果。NGUI的UIWrapContent正是用以解决这个问题。</p>
<p>UIWrapContent可以使用大于等于2个的item子物体进行循环利用，具体几个需要看页面情况，保证不穿帮即可。UIWrapContent需要配合UIScrollView，因为需要滑动，而UIScrollView会强制添加UIPanel，也就是说，实现循环机制，这三个组件缺一不可</p>
<h4 id="原理图解"><a href="#原理图解" class="headerlink" title="原理图解"></a>原理图解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UI界面 -&gt; UI界面: 初始化WrapContent()</span><br><span class="line">note right of UI界面:赋值minIndex</span><br><span class="line">note right of UI界面:赋值maxIndex</span><br><span class="line">note right of UI界面:注册onInitializeItem</span><br><span class="line"></span><br><span class="line">Unity -&gt; WrapContent:Start()</span><br><span class="line">note left of WrapContent:排列所有子物体</span><br><span class="line">note left of WrapContent:SortBasedOnScrollMovement()</span><br><span class="line">note left of WrapContent:WrapContent()</span><br><span class="line">note left of WrapContent:绑定Panel的onClipMove委托</span><br><span class="line"></span><br><span class="line">ScrollView -&gt; WrapContent:Drag()</span><br><span class="line">note right of WrapContent:当拖拽ScrollView</span><br><span class="line">ScrollView -&gt; UIPanel:onClipMove()</span><br><span class="line">note left of UIPanel:驱动onClipMove</span><br><span class="line"></span><br><span class="line">UIPanel -&gt; WrapContent:OnMove()</span><br><span class="line">note right of WrapContent: WrapContent()</span><br><span class="line">WrapContent -&gt; WrapContent:UpdateItem()</span><br><span class="line">note right of WrapContent: 刷新子物体位置</span><br><span class="line">note right of UI界面: 调用onInitializeItem委托</span><br><span class="line">WrapContent -&gt; UI界面:响应onInitializeItem委托</span><br><span class="line">note right of UI界面:刷新item数据跟UI</span><br></pre></td></tr></table></figure>
<p><em>页面响应 UIWrapContent 的 onInitializeItem 委托的前提是注册了这个委托</em></p>
<h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><p>UIWrapContent真正重要的属性有：</p>
<ul>
<li>temSize：这是子物体的间距</li>
<li>minIndex：item总数据的最小值</li>
<li>maxIndex：item总数据的最大值</li>
<li>onInitializeItem：item更新委托</li>
<li>SortBasedOnScrollMovement()：将子物体根据UIScrollView的方向进行排序</li>
<li>WrapContent()：计算偏移，如果满足一定条件的话，调用UpdateItem()更新子物体</li>
<li>UpdateItem()：更新子物体</li>
</ul>
<p>当minIndex等于maxIndex等于0的时候，可以无限滑动。可以看出来，真正重要的是WrapContent()这个方法，那么WrapContent做了什么呢？</p>
<ol>
<li><p>计算panel的中心点center</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector3[] corners = mPanel.worldCorners;</span><br><span class="line">for (int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">	Vector3 v = corners[i];</span><br><span class="line">	v = mTrans.InverseTransformPoint(v);</span><br><span class="line">	corners[i] = v;</span><br><span class="line">&#125;</span><br><span class="line">Vector3 center = Vector3.Lerp(corners[0], corners[2], 0.5f); // panel中心点</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算子物体覆盖的范围extents（高度或者长度），也就是所谓上/下边界</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float extents = itemSize * mChildren.Count * 0.5f; // 子物体覆盖的一半，也就是上或者下边界，用以计算偏差</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历所有子物体，计算子物体localPosition与panel中心点center的差值，如果差值的绝对值大于边界extents，表明这个子物体已经需要更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i = 0, imax = mChildren.Count; i &lt; imax; ++i) &#123;</span><br><span class="line">	Transform t = mChildren[i];</span><br><span class="line">	float distance = t.localPosition.y - center.y;</span><br><span class="line">	if (distance &lt; -extents) &#123;</span><br><span class="line">		// 表明需要进行移动更新操作</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算子物体的新位置（当前位置+/-边界高度）并重新赋值给当前物体，也就是一旦超出边界则从最顶部移动到最底部，或者从最底部移动到最顶部；计算子物体所对应的数据的下标 realIndex（计算后的位置/itemSize）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (distance &lt; -extents) &#123;</span><br><span class="line">	Vector3 pos = t.localPosition;</span><br><span class="line">	pos.y += ext2;</span><br><span class="line">	distance = pos.y - center.y;</span><br><span class="line">	int realIndex = Mathf.RoundToInt(pos.y / itemSize);</span><br><span class="line">	if (minIndex == maxIndex || (minIndex &lt;= realIndex &amp;&amp; realIndex &lt;= maxIndex)) &#123;</span><br><span class="line">		t.localPosition = pos;</span><br><span class="line">		UpdateItem(t, i); // 更新Item子物体</span><br><span class="line">	&#125;</span><br><span class="line">	else allWithinRange = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="5">
<li><p>调用 UpdateItem() 刷新子物体</p>
</li>
<li><p>调用 onInitializeItem 委托通知订阅者变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected virtual void UpdateItem (Transform item, int index) &#123;</span><br><span class="line">	if (onInitializeItem != null) &#123;</span><br><span class="line">		int realIndex = (mScroll.movement == UIScrollView.Movement.Vertical) ?</span><br><span class="line">			Mathf.RoundToInt(item.localPosition.y / itemSize) :</span><br><span class="line">			Mathf.RoundToInt(item.localPosition.x / itemSize);</span><br><span class="line">		onInitializeItem(item.gameObject, index, realIndex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h5><p>数据一份 whichList，最好以List或者数组最美，一个挂载有UIScrollView根UIPanel的GameObject，这个GameObject包含一个子物体，上面挂载了UIWrapContent；设置WrapContent的itemHeight为合适的大小；一个用于显示的item，上面挂载对应的数据类ItemClass，刷新子物体位置以后，还要将UIScrollView重置到初始位置</p>
<h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wrapContent.minIndex = -(whichList.Count - 1);	  // 数据下标下限</span><br><span class="line">wrapContent.maxIndex = 0; 						// 数据下标上限</span><br><span class="line">wrapContent.onInitializeItem += OnInitializeItem;   // 订阅 onInitializeItem 委托</span><br><span class="line">wrapContent.SortBasedOnScrollMovement ();		 // 刷新子物体的位置信息</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wrapContent.minIndex = 0 					// 数据下标下限</span><br><span class="line">wrapContent.maxIndex = whichList.Count - 1;   // 数据下标上限</span><br><span class="line">wrapContent.onInitializeItem += OnInitializeItem; // 订阅 onInitializeItem 委托</span><br><span class="line">wrapContent.SortBasedOnScrollMovement (); 	  // 刷新子物体的位置信息</span><br></pre></td></tr></table></figure>
<p>需要注意的是，SortBasedOnScrollMovement ()是需要在UIWrapContent在场景中显示的情况下才会起作用，方法里面对子物体的显示状态进行了判断，因此，这个方法跟前面的赋值并不一定需要在一起调用，这里只是做个示范。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mChildren.Clear();</span><br><span class="line">for (int i = 0; i &lt; mTrans.childCount; ++i) &#123;</span><br><span class="line">	Transform t = mTrans.GetChild(i);</span><br><span class="line">	if (hideInactive &amp;&amp; !t.gameObject.activeInHierarchy) continue;</span><br><span class="line">		mChildren.Add(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OnInitializeItem方法：第一个参数是对应的子物体的GameObject， 第二个参数wrapIndex是第几个子物体的Index，第三个参数realIndex是计算得出的数据list中的下标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void OnInitializeItem (GameObject itemObj, int wrapIndex, int realIndex) &#123;</span><br><span class="line">	if (-realIndex &gt;= 0 &amp;&amp; -realIndex &lt; whichList.Count) &#123;</span><br><span class="line">		ItemClass tmpItem = itemObj.GetComponent&lt;ItemClass&gt; ();</span><br><span class="line">		tmpItem.Data = whichList[-realIndex];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据初始化时的minIndex跟maxIndex的区别，这里的条件判断也跟着有所区别。如果minIndex跟maxIndex的范围为[0, whichList.Count - 1]  那么这里的realIndex就都是负值，反之则都是正值。因此判断跟取值的时候需要进行相应的转化。</p>
<p>ItemClass是子物体Item上面挂载的数据类，Data是对应的数据格式。</p>
<p>这些准备好以后，就可以在场景的WrapContent子节点下生成恰当的Item个数，可以用代码生成，也可以在场景中事先放好。区别不大。</p>
<p>如果是代码生成子item，则需要在生成后再调用wrapContent.SortBasedOnScrollMovement () 对子物体进行刷新操作</p>
<p>以上完成以后，就可以正常使用WrapContent了，可能出现的问题：</p>
<ol>
<li>数据跟index对不上，有可能是初始化时minIndex跟maxIndex错误，也有可能是在wrapContent物体没有激活的情况下就调用了刷新方法 wrapContent.SortBasedOnScrollMovement (); </li>
<li>UI显示的数据重复，可能是使用了错误的index，我们需要使用的应该是realmIndex，而不是wrapIndex</li>
<li>刚开始数据显示错误，有可能是使用了UITable跟UIGrid进行了刷新Item位置，导致位置出现偏差，UIWrapContent不需要跟UITable、UIIGrid一块使用</li>
</ol>
<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><ol>
<li>源码中的UIWrapContent有所局限，只支持一列或者一行item的重复利用，多了就没有办法。如果有需要，可以自己手动添加方法进行扩展，使其支持多行多列。或者将多行多列想办法转换成一行一列</li>
<li>无法支持跳转到中间部分，因为SortBasedOnScrollMovement ()会将所有子物体从0开始进行重置位置并排序</li>
</ol>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="跳转到任意Item"><a href="#跳转到任意Item" class="headerlink" title="跳转到任意Item"></a>跳转到任意Item</h5><p>源码可知，UIWrapContent是使用子物体的localPosition来计算其对应数据在list中的下标Index的。而每次调用SortBasedOnScrollMovement ()必然会将所有子物体从0开始重新计算位置。</p>
<p>而所有UIScrollView下的子物体的位置都是由UIScrollView滑动来计算的，因此只需要控制UIScrollView的位置，并将UIWrapContent 的 SortBasedOnScrollMovement () 换成根据当前位置进行计算的就可以实现跳转到中间的操作。</p>
<p>在UIWrapContent中新增 SetChildPositionAppropriate()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> void SetChildPositionAppropriate() &#123;</span><br><span class="line">    float extents = itemSize * mChildren.Count * 0.5f;</span><br><span class="line">    Vector3[] corners = mPanel.worldCorners;</span><br><span class="line">    for (int i = 0; i &lt; 4; ++i)&#123;</span><br><span class="line">        Vector3 v = corners[i];</span><br><span class="line">        v = mTrans.InverseTransformPoint(v);</span><br><span class="line">        corners[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    Vector3 center = Vector3.Lerp(corners[0], corners[2], 0.5f);</span><br><span class="line">    float halfPanelLength;</span><br><span class="line">    if (mHorizontal) &#123;</span><br><span class="line">        halfPanelLength = Mathf.Abs(center.x - corners[0].x);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        halfPanelLength = Mathf.Abs(center.y - corners[0].y);</span><br><span class="line">    &#125;</span><br><span class="line">    if (extents &lt; halfPanelLength) &#123; //当用于填充的items不能满足一个屏幕的情况 </span><br><span class="line">        extents = halfPanelLength;</span><br><span class="line">    &#125;</span><br><span class="line">    int skipCount = (int)(Mathf.Abs(mHorizontal? center.x : center.y) - extents) / itemSize;</span><br><span class="line">    if (skipCount &lt; 0) &#123;</span><br><span class="line">        skipCount = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (maxIndex != minIndex)//无限循环的情况不考虑列表尾部的处理</span><br><span class="line">    &#123;</span><br><span class="line">        int dataCount = Mathf.Abs(maxIndex - minIndex) + 1;</span><br><span class="line">        if (skipCount + mChildren.Count &gt; dataCount)&#123;</span><br><span class="line">            skipCount = dataCount - mChildren.Count;</span><br><span class="line">            if (skipCount &lt; 0)&#123;</span><br><span class="line">                skipCount = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 更新所有子物体</span><br><span class="line">    for (int i = 0, imax = mChildren.Count; i &lt; imax; ++i) &#123;</span><br><span class="line">        Transform t = mChildren[i];</span><br><span class="line">        t.localPosition = mHorizontal ? new Vector3((i + skipCount) * itemSize, 0f, 0f) : new Vector3(0f, -(i + skipCount) * itemSize, 0f);</span><br><span class="line">        UpdateItem(t, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是skipCount，计算方式为：panel的中心点center与边界extent的差值（表示当前UIScrollView移动到了的位置），这个值与间距itemSize的商就是当前已经移动过的item数量，</p>
<p>dataCount，即数据List 长度为 maxIndex 与 minIndex 差的绝对值加1，然后更新子物体的时候，直接从跳过的位置进行计算</p>
<p>需要注意的是，调用这个方法之前，需要调用UIScrollView的MoveRelative(Vector3 pos) 方法，将UIScrollView移动到相应的位置</p>
]]></content>
      <tags>
        <tag>NGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua面向对象</title>
    <url>/2019/03/29/Lua/Lua%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="Lua面向对象"><a href="#Lua面向对象" class="headerlink" title="Lua面向对象"></a>Lua面向对象</h3><p>Lua本身是没有面向对象这个概念的，但是table的各种用法却可以模拟出类似面向对象的东西。Lua中唯一的数据结构就是Table，那么自然，一个类自然也就是一个Table。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person = &#123;</span><br><span class="line">    age = 10,</span><br><span class="line">    name  = &quot;ee&quot;;</span><br><span class="line">    Init = function(age, name)</span><br><span class="line">        Person.age = age;</span><br><span class="line">        Person.name = name;</span><br><span class="line">    end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(Person.age, Person.name) -- 输出 10 &quot;ee&quot;</span><br><span class="line">Person.Init(1, &quot;面向对象&quot;)</span><br><span class="line">print(Person.age, Person.name) -- 输出 1 &quot;面向对象&quot;</span><br></pre></td></tr></table></figure>
<p>如上，Person就是一张简单的Table，也可以看作一个基本类，拥有age跟name两个字段，Init方法。直接以Person开头调用表中的方法跟字段</p>
<p>当然，这只是简单的类的模拟，只能有一个，而无法以Person为模板，创建多个Person实例。这时候就需要用到Lua的元表（mateTable）跟元方法(metaMethod)。</p>
<h4 id="元表与元方法"><a href="#元表与元方法" class="headerlink" title="元表与元方法"></a>元表与元方法</h4><p>元表的作用在于以一个表作为模板，使对象克隆多个实例成为可能。元表可以使关联该元表生成的表都可以共享元表的方法跟属性。而原方法的作用在于，可以使Table表之间的操作变的更自由跟定制。将上面的Person进行修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person:New(age, name)</span><br><span class="line">    local o = &#123;&#125;</span><br><span class="line">    setmetatable(o, self)</span><br><span class="line">    self.__index = self</span><br><span class="line">    o.age = age</span><br><span class="line">    o.name = name</span><br><span class="line">    return o</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Person:Print()</span><br><span class="line">    print(self.age, self.name)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local p = Person:New( 2, &quot;tt3&quot;)</span><br><span class="line">p:Print()</span><br><span class="line">local p2 = Person:New( 3, &quot;ttt&quot;)</span><br><span class="line">p:Print() -- 输出 2 tt3</span><br><span class="line">p2:Print() -- 输出 3 ttt</span><br><span class="line">print(getmetatable(p), Person) -- 输出两个同样的数值</span><br></pre></td></tr></table></figure>
<p>setmetatable(t, mt) 表示将一个表 t 的元表关联为 mt，这样每一个调用New方法以后，返回的表都是关联的同一个元表，仅仅是这样还不够，返回的表虽然已经关联到元表Person，但也只是关联了而已，新生成的 p 跟 p2 还是无法调用Person中的方法，因为这是表与表之间的操作。</p>
<p>此时就需要用到原方法。__index 元方法定义了元表与关联便之间的关系：如果关联表中自己找得到调用的方法跟字段的 话，则调用关联表中的。如果关联表中找不到的方法跟字段，则会去元表中查找对应的方法跟字段，如果有则调用。没有则提示不存在的方法跟字段</p>
<p>如此，当调用 p:Pring() 跟 p2:Pring() 的时候，p跟p2中其实并没有Print()方法，但是还是正确的输出了，正是调用了元表的Print()方法。这也就正确的模拟了对象生成实例的过程。</p>
<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>面向对象的一大特点就是继承，Lua的元表跟元方法也能模拟，Teacher继承了Person，并重写了Print()方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person = &#123;&#125;</span><br><span class="line"></span><br><span class="line">function Person:New(age, name)</span><br><span class="line">    local o = &#123;&#125;</span><br><span class="line">    setmetatable(o, self)</span><br><span class="line">    self.__index = self</span><br><span class="line">    o.age = age</span><br><span class="line">    o.name = name</span><br><span class="line"></span><br><span class="line">    return o</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Person:GetAge()</span><br><span class="line">    return self.age</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Person:Print()</span><br><span class="line">    print(self.age, self.name)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">Teacher = Person:New()</span><br><span class="line">function Teacher:New(age, name, course)</span><br><span class="line">    local t = Person:New(age, name)</span><br><span class="line">    setmetatable(t, self)</span><br><span class="line">    self.__index = self</span><br><span class="line">    t.course = course</span><br><span class="line">    return t</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Teacher:Print()</span><br><span class="line">    print(self.age, self.name, self.course)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local t1 = Teacher:New(33, &quot;王老师&quot;, &quot;语文&quot;)</span><br><span class="line">t1:Print() -- 输出 33 王老师 语文</span><br><span class="line">print(&quot;age:&quot;, t1:GetAge()) -- 输出 age:33</span><br></pre></td></tr></table></figure>
<p>Teacher并没有重写GetAge()方法，然后 t1:GetAge() 却正确的输出了，可见是正确的继承了这个方法。而重写的Print()方法，多输出了一个课程，也正常输出，可见重写也是可以的。</p>
<h4 id="方法访问权限（私有公有）"><a href="#方法访问权限（私有公有）" class="headerlink" title="方法访问权限（私有公有）"></a>方法访问权限（私有公有）</h4><p>冒号的作用是省略了self的传递，也就是说，如果我们不想写冒号改为写等号的话，那么每个方法的第一个参数必然是self：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person.Print()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function Person:Console()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">p = Person:New()</span><br><span class="line">p.Print(self)</span><br><span class="line">p:Console()</span><br></pre></td></tr></table></figure>
<p>可以看上图的Print方法跟Console方法，self是为了找到对应的表中的方法，不传的话，必然会报错。冒号相当于语法糖，可以忽略self的传递，使得方法更加简洁明了。</p>
<p>以上两种方法都可以说是Public方法，实例p是可以正常访问到的。</p>
<p>私有方法同样需要传递这个self，区别在于，私有方法是用local写的。跟其他语言不同之处在于，Lua中模拟的私有方法并没有确定的归属，换句话说，它只属于其所写的Lua文件，而不是写在文件中的某个Table表，当然只要控制号一个文件只写一个类则不存在这个问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local function Console(self)  -- 私有方法 Console</span><br><span class="line">    print(self.age, self.name, self.course)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local t1 = Teacher:New(33, &quot;王老师&quot;, &quot;语文&quot;)</span><br><span class="line">Console(t1)  -- 输出为：33 王老师  语文</span><br><span class="line">local p = Person:New( 2, &quot;tt3&quot;)</span><br><span class="line">Console(p) -- 输出为：2 tt3 nil</span><br></pre></td></tr></table></figure>
<p>可以看出来，Console是私有方法，外部无法访问。但是Person跟Teacher都可以访问，也就是说Console方法既不属于Person也不属于Teacher，它只管你输入的self是谁，但是如果我们只写了一个Person方法，而没有写继承的Teacher，则不用考虑这个问题。</p>
]]></content>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua表（table）</title>
    <url>/2019/03/28/Lua/Table/</url>
    <content><![CDATA[<h3 id="Lua表（table）"><a href="#Lua表（table）" class="headerlink" title="Lua表（table）"></a>Lua表（table）</h3><p>表示lua独有的一种数据结构，地位就像字典之于C#。不同的是，lua出来string、number这些基本类型之外，只有一个table表数据结构，而它丰富的自由度，也能任意扩展跟模拟一些其他语言的数据结构</p>
<h4 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h4><ol>
<li><p>myTable = {}  创建一个张空表</p>
</li>
<li><p>myTable = {key1 = value1, key2 = value2}</p>
<p>这种情况下有多种方式可以创建，却决于你需要用的是那种形式的数据格式，比如：</p>
<ul>
<li>数组型：myTable = {[1] = “小A”, [2] = “小B”, [3] = “小C”, [4] = “小D”} 或者myTable = {1, 2, 3, 4}</li>
<li>字典型：myTable = {[“name1”] = “小A”,  [“name1”] = “小B”}，或者直接myTable = {name1 = “小A”，name2 = “小B”}</li>
<li>混合型：myTable = { {[1] = {[“name”] = “小A”;  “age” = 5}},   {[2] = {[“name”] = “小B”;  “age” = 5}}}</li>
<li>自由组合型：myTable = {[‘name’] = “小A”,  [‘age’] = 10; [‘favor’] = {}; GetAge = function() return 10 end }</li>
</ul>
</li>
</ol>
<p>数组型的表以数组下标来进行读取。</p>
<ul>
<li>赋值直接根据下标读取然后修改值：myTable[1] = “小F”，可直接修改元素。</li>
<li>删除元素则直接将对应的值赋值为nil即可：myTable[1] = nil</li>
<li>lua中数组是无序的，只是下标对应了值，因此能根据下标进行取值/赋值操作</li>
</ul>
<p>字典型，跟C#的Dictionary一样，一个key对应一个value值，key可以是任意类型，而value则不定，但是为了保持数据一致性，通常key是同类型，value也都是同类型，否则容易出现一些数据类型错误。当然如果自信能够任意掌控，则没有这么多限制</p>
<ul>
<li>取值跟赋值的时候，直接根据key进行操作：myTable[“name1”] = “小C”</li>
<li>删除元素，直接将value赋值为nil表示删除元素：myTable[“name1”] = nil</li>
<li></li>
</ul>
<p>需要注意的是，一旦删除元素，也就是将元素的值设置为nil，字典型的是没有什么问题的。但是数组型的就需要谨慎了，如果将数组中间的值赋值为nil，则在以ipairs进行遍历的时候，以nil之后的都将遍历不出来，也就是说，ipairs遍历到值为nil的时候，直接中断了循环。但是不影响直接以下标读取nil后面的值，这点比较容易坑到自己。而以pairs进行遍历则没有这个问题，pairs遍历数组时遇到中间删除的它会输出nil，pairs遍历字典型的则会直接跳过nil值的。具体原理在于table的存储方式跟两种遍历之间的差别，后面再说。</p>
<p>混合型跟自由组合型是字典的扩展类型，纯属个人归纳，操作都跟字典差不多，只是在细节上有些区别，更自由一些</p>
<h4 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h4><h5 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h5><ul>
<li><p>数组型插入</p>
<p>lua内置了数组型table的增删方法。数组型table的插入使用的是 table.insert(t, pos, value)，t为需要插入的表，pos为需要的下标，如果不填pos的话，则默认插入数组的尾部，value为需要插入的值。例如：myTable = {1, 2, 3, 5}, 在下标4的位置插入4：table.insert(myTable, 4, 4)。如果不写pos：table.insert(myTable, 4)则表示将值4填入下标为5的位置（因为数组长度为4），插入的话，目标位置前的不变化，目标位置之后的顺位移动一位。</p>
</li>
<li><p>字典型插入</p>
<p>字典型由于没有下标一说，因此想要插入一个值，直接添加相应的key跟value即可：t = {[1001] = “小A”，[1002] = “小B”}，插入一个1003，则 t[1003] = “小C” 就可以了。如果字典的key是string格式的，则也可以用“table.key”的方式进行插入，</p>
</li>
<li><p>混合型/自由型插入</p>
<p>自有型的可以使用字典型的插入方式进行插入，也可以直接以“table.key”的方式进行加入，比如 t ={ name = “小A”， age = 10 }，那么加入我们需要在t中插入小A的爱好，那么就可以写为：t.favor = “斗地主”，这样会方便一点，就是看上去随意了些</p>
</li>
</ul>
<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul>
<li><p>数组型删除</p>
<p>同样使用内置的方法进行删除元素，table.remove(t, pos)。t 是需要删除的表，pos是需要删除的位置：myTable[1] = nil</p>
</li>
<li><p>字典型删除</p>
<p>字典型的table删除则直接赋值为nil即可：myTable[1001] = nil  删除key为1001的元素，或者使用”table.key”进行方式删除： t ={ name = “小A”， age = 10 },  t.age = nil，同样可以达到效果</p>
</li>
<li><p>混合型/自由型删除 </p>
<p>跟字典型一样，直接赋值为nil即可，例如有一个表为 t ={ name = “小A”， age = 10 }，我们需要删除t的age：t [“age”] = nil，当然，也可以使用”table.key”进行删除：t.age = nil，两种删除方式都可以</p>
</li>
</ul>
<h4 id="排序元素"><a href="#排序元素" class="headerlink" title="排序元素"></a>排序元素</h4><ul>
<li><p>数组型</p>
<p>数组型的排序使用的是内置的table.sort(t, comp)，t是需要排序的数组table，comp是排序函数。comp排序函数可以不传递，默认采用 ‘&lt;’ 排序。传入排序函数则表示使用自定义排序方式。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t = &#123;3,5,1,6,2&#125; </span><br><span class="line">print(table.concat(t, &quot;_&quot;))  -- 输出：3_5_1_6_2</span><br><span class="line">table.sort(t) </span><br><span class="line">print(table.concat(t, &quot;_&quot;))  -- 输出：1_2_3_5_6</span><br></pre></td></tr></table></figure>
</li>
<li><p>非数组型无法排序</p>
</li>
</ul>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>lua迭代器分为无状态迭代器，多状态迭代器。无状态迭代器不保存任何迭代状态，多状态的迭代器保存迭代状态。两者的区别在于是否会在迭代函数内部创建并返回闭包。两者各有优劣，无状态的避免了创建闭包，有状态则可以遍历非数组table；</p>
<p>lua中的迭代器典型的为ipairs跟pairs，ipairs是无状态迭代器；迭代器调用时，返回下一个元素的值跟对应的下标，比如调用 t[1] 时，返回的为 t[2], 2，如果下个元素为nil，则结束循环</p>
<ul>
<li><p>ipairs </p>
<p>模拟lua的ipairs，迭代函数为iterator，传入表t 跟下标index，每次index加1，然后根据index去表中取值，取到则返回对应的下标跟值，没取到则结束循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function iterator(t, index)</span><br><span class="line">    index = index + 1</span><br><span class="line">    if t[index] then</span><br><span class="line">        return index, t[index]</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function cIpairs(t)</span><br><span class="line">    return iterator, t, 0</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">t3 = &#123;2, 1, 4, 5, 6&#125;</span><br><span class="line">for i, v in cIpairs(t3) do</span><br><span class="line">    print(i,v)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>pairs </p>
<p>pairs 是非数组型表的遍历，当然也可以遍历数组型，为多状态迭代器。每次循环返回一个闭包函数，在闭包函数里面计算并返回对应的key的值或者nil，如果返回值是nil则结束循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function iterator(t)</span><br><span class="line">    local index = 0</span><br><span class="line">    return function()</span><br><span class="line">        index = index + 1</span><br><span class="line">        if index &lt;= #t then</span><br><span class="line">            return index, t[index]</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function iterator2(t)</span><br><span class="line">    local index = 0</span><br><span class="line">    return function()</span><br><span class="line">        index = index + 1</span><br><span class="line">        return next(t, index)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">t3 = &#123;2, 1, 4, 5, 6&#125;</span><br><span class="line">for i, v in iterator2(t3) do</span><br><span class="line">    print(i, v)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>iterator跟iterator2都包含一个闭包函数，里面计算下一个元素是否是nil。pairs是根据next的返回值判断是否还有下一个元素，相当于iterator2。区别在于我们使用的table隔了一层，无法直接取到key进行判断，所以只能遍历数组tabl</p>
</li>
</ul>
<p>需要注意的是，数组的插入跟删除不建议使用直接赋值为nil的方式，因为这样一来，势必导致数组的长度出现诡异的问题，而导致无法遍历到需要的内容，比如一个表中间的下标对应的值被赋值为nil，那么，有可能这个下标之后的所有元素都无法正常遍历到，因为ipairs遍历到第一个元素为nil时就结束循环了。</p>
<p>还可能引起数组排序遇到问题，即传入的元素为nil，会直接导致排序出错</p>
<p>正确的方式应该是使用table.insert 跟 table.remove 进行增删操作。</p>
]]></content>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>UIPanel 面板</title>
    <url>/2019/03/26/NGUI/NGUI-UIPanel%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h3 id="UIPanel-面板"><a href="#UIPanel-面板" class="headerlink" title="UIPanel 面板"></a>UIPanel 面板</h3><p>UIPanel是用以隔离各个页面的工具，它保存并管理其子节点下面的所有UIWidget跟继承自UIWidget类型的UI元素，各个 UIPanel 之间以 <em>depth</em> 参数进行隔离</p>
<h4 id="Clipping裁剪"><a href="#Clipping裁剪" class="headerlink" title="Clipping裁剪"></a>Clipping裁剪</h4><h5 id="裁剪方式"><a href="#裁剪方式" class="headerlink" title="裁剪方式"></a>裁剪方式</h5><p>UIDrawCall中枚举：Clipping：None、TextureMask、SoftClip、ConstrainButDontClip</p>
<table>
<thead>
<tr>
<th>Enum</th>
<th>value</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>None</td>
<td>0</td>
<td>无</td>
</tr>
<tr>
<td>TextureMask</td>
<td>1</td>
<td>遮罩裁剪</td>
</tr>
<tr>
<td>SoftClip</td>
<td>2</td>
<td>矩形裁剪</td>
</tr>
<tr>
<td>ConstrainButDontClip</td>
<td>3</td>
<td>No actual clipping, but does have an area</td>
</tr>
</tbody>
</table>
<p>在UIIPanel的Inspector面板可以选择裁剪方式，修改以后，会调用UIPanel的 <em>LateUpdate()</em> 方法进行刷新。最后会调用UIDrawCall的 <em>UpdateGeometry()</em> 方法进行更换当前DrawCall的shader</p>
<h5 id="裁剪范围"><a href="#裁剪范围" class="headerlink" title="裁剪范围"></a>裁剪范围</h5><ul>
<li>mClipRange（Vector4）裁剪范围</li>
<li>baseClipRegion(Vector4)  等同于上面的mClipRange，Inspector面板直接修改baseClipRange，并应用到mClipRange上</li>
<li>clipOffset  裁剪偏移量，用以移动子物体而裁剪框保持位置不变，通常与ScrollView一起使用</li>
<li>finalClipRegion  最终裁剪范围，如果有裁剪就返回计算后的裁剪值，否则返回相机裁剪框计算后的裁剪值</li>
</ul>
<p>确定裁剪范围以后，在DrawCall的 <em>CreateMaterial ()</em> 中加载裁剪shader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void CreateMaterial ()&#123;</span><br><span class="line">    ... 省略</span><br><span class="line">    mClipCount = panel.clipCount;</span><br><span class="line">    ... 省略shaderName获取过程</span><br><span class="line">    if (shader == null) </span><br><span class="line">    	shader = Shader.Find(shaderName + &quot; &quot; + mClipCount);</span><br><span class="line">    ... 省略赋值shader给material</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><p>在UIDrawCall的渲染方法 <em>OnWillRenderObject()</em> 中，会给shader赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shader:</span><br><span class="line">sampler2D _MainTex;</span><br><span class="line">float4 _ClipRange0 = float4(0.0, 0.0, 1.0, 1.0);</span><br><span class="line">float2 _ClipArgs0 = float2(1000.0, 1000.0);</span><br></pre></td></tr></table></figure>
<p>shader有两个参数，一个是裁剪范围(_ClipRange0)，一个是裁剪参数(_ClipArgs0)，在 <em>SetCliping()</em> 方法中进行传递，shader根据这两个参数进行裁剪</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void OnWillRenderObject ()&#123;</span><br><span class="line">    ... 省略</span><br><span class="line">    if (mTextureClip)&#123;</span><br><span class="line">    	... 省略</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        ... 省略</span><br><span class="line">        SetClipping(i++, cr, currentPanel.clipSoftness, angle);</span><br><span class="line">    &#125;</span><br><span class="line">    ... 省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SetClipping (int index, Vector4 cr, Vector2 soft, float angle)&#123;</span><br><span class="line">    angle *= -Mathf.Deg2Rad;</span><br><span class="line">	Vector2 sharpness = new Vector2(1000.0f, 1000.0f);</span><br><span class="line">	if (soft.x &gt; 0f) sharpness.x = cr.z / soft.x;</span><br><span class="line">	if (soft.y &gt; 0f) sharpness.y = cr.w / soft.y;</span><br><span class="line">	if (index &lt; ClipRange.Length)&#123;</span><br><span class="line">		mDynamicMat.SetVector(ClipRange[index], new Vector4(-cr.x / cr.z, -cr.y / cr.w, 1f / cr.z, 1f / cr.w));</span><br><span class="line">		mDynamicMat.SetVector(ClipArgs[index], new Vector4(sharpness.x, sharpness.y, Mathf.Sin(angle), Mathf.Cos(angle)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="裁剪移动"><a href="#裁剪移动" class="headerlink" title="裁剪移动"></a>裁剪移动</h5><p>UIPanel的移动主要靠UIScrollView驱动，UIScrollView滑动的时候（MoveRelative()之类），直接将偏移量赋值给关联的UIPanel的 <em>clipOffset</em>，而transform的localPosition的变化值与 <em>clipOffset</em> 的绝对值是相同的。也就是说，物体移动的偏移量，由clipOffset进行平衡，这样两者能实现物体移动了，但是裁剪框不动。同时调用onClipMove委托，通知订阅者当前ScrollView正在滑动</p>
<h4 id="深度depth解析"><a href="#深度depth解析" class="headerlink" title="深度depth解析"></a>深度depth解析</h4><p>UIPanel 靠 <em>depth</em> 属性隔离各个UIPnel。分为两个部分，一为渲染的隔离，二为点击响应的隔离。</p>
<h5 id="渲染的隔离"><a href="#渲染的隔离" class="headerlink" title="渲染的隔离"></a>渲染的隔离</h5><p>渲染的隔离意思为，在一个UIPanel下方的 <em>UIWidget</em> 元素，不会在其他UIPanel中显示。这种隔离是靠 <em>depth</em> 实现的。由《NGUI渲染流程分析》可以知道，UIPanel的渲染是靠自身的DrawCall的RenderQueue决定的。UIPanel的 <em>depth</em> 变化以后，对保存所有UIPanel的 <em>list</em> 根据 <em>depth</em> 大小进行排序，然后更新所有的DrawCall的RenderQueue大小。也就是说：</p>
<p><em>depth 越小，对应的UIPenal在 list 越靠前，则其DrawCall的 RenderQueue 越小，则渲染时越先渲染，则会被遮挡；反之，depth越大，则对应UIPanel的 UIWidget 元素越靠后渲染，则遮挡其他 UIWidget 元素</em></p>
<h5 id="点击隔离"><a href="#点击隔离" class="headerlink" title="点击隔离"></a>点击隔离</h5><p>NGUI的点击隔离也是靠depth来起作用的，大概原理就是：</p>
<ol>
<li>遍历射线碰撞到的所有 <em>UIWidget</em> 并计算 最终的 <em>depth</em>，并保存进List中</li>
<li>将这个List根据最终的 depth 进行排序，最顶上的就是最上层的也是应该正确被点击到的那个</li>
<li>遍历这个List，第一个可见的便是点击到的 <em>UIWidget</em></li>
<li>响应这个 <em>UIWidget</em> 身上的点击事件</li>
</ol>
<p>具体代码可以看 <em>UICamera</em> 的 <em>Raycast (Vector3 inPos)</em> 方法</p>
<p>最终的depth：需要考虑上UIWidget所属的UIPanel的depth上限，如下图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int raycastDepth&#123;</span><br><span class="line">	get&#123;</span><br><span class="line">		if (panel == null) CreatePanel();</span><br><span class="line">		return (panel != null) ? mDepth + panel.depth * 1000 : mDepth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说，两个depth相邻的UIPanel的点击差值是1000，比如depth分别为1，2的两个UIPanel，前者的点击范围为 &gt;= 1000，而后者的为 &gt;= 2000。</p>
<p>并没有上限，一旦前者有一个UIWidget的depth超过1000，那么就有可能出现点击穿透的行为。不过一般情况下是足够使用了</p>
]]></content>
      <tags>
        <tag>NGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua事件系统（EventManager.lua）</title>
    <url>/2019/03/22/Lua/Lua%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="Lua事件系统（EventManager-lua）"><a href="#Lua事件系统（EventManager-lua）" class="headerlink" title="Lua事件系统（EventManager.lua）"></a>Lua事件系统（EventManager.lua）</h3><p>在使用LuaFrameWork的时候，苦于没有事件系统传递消息，于是写了这个事件管理器，进行多个模块之间、单个模块内部的消息传递。</p>
<p>作为事件管理器，那么就是需要管理事件，因此我选择function作为参数进行传递。事件需要一个唯一标识符，无论是数字还是string都可以，我选择string作为标识符，因为这样更容易辨识。事件有可能需要传递参数，lua的可变参数为 ‘…’三个点。</p>
<p>用string作为唯一标识符的问题在于可能会不小心出现两个同样的标识符，这样就会导致出现错误调用的问题，因此我添加了一个tag标签，用于区分不同模块的事件。</p>
<h4 id="保存事件"><a href="#保存事件" class="headerlink" title="保存事件"></a>保存事件</h4><p>事件我用两个变量进行保存，一个是带tag的表示模块内部的事件容器 <em>eventsWithTag</em>，一个是不带tag的，表示通用的事件的容器 <em>events</em></p>
<h4 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local function AddListener(list, name, func)</span><br><span class="line">    if list[tostring(name)] == nil then</span><br><span class="line">        list[tostring(name)] = &#123;&#125;</span><br><span class="line">        table.insert(list[tostring(name)], func)</span><br><span class="line">    else</span><br><span class="line">        local eventList = list[tostring(name)]</span><br><span class="line">        if not CheckContainFunc(eventList, func) then</span><br><span class="line">            table.insert(eventList, func)</span><br><span class="line">        else</span><br><span class="line">            print(string.format(&quot;Events Contains A Same Key %s&quot;, name))</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function AddListenerWithTag(tag, name, func)</span><br><span class="line">    if eventsWithTag[tostring(tag)] then</span><br><span class="line">        local tagEvents = eventsWithTag[tostring(tag)]</span><br><span class="line">        AddListener(tagEvents, name, func)</span><br><span class="line">    else</span><br><span class="line">        eventsWithTag[tostring(tag)] = &#123;&#125; -- add a new tag to keep events</span><br><span class="line">        AddListener(eventsWithTag[tostring(tag)], name, func)</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>tag 表示模块的唯一标识符，lua中没有过多的数据格式限制，如果需要的话，可以改为其他的数据格式，比如数字、table等等，管理器通过这个tag查找事件属于哪个模块的事件</p>
<p>name 表示事件的唯一标识符，管理器通过这个name查找对应的事件</p>
<p>func 表示回调函数，事件最终会调用这些方法，方法可以带参数，调用的时候如果不传递则为nil</p>
<h4 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local function RemoveListener(list, name, func)</span><br><span class="line">    if list ~= nil then</span><br><span class="line">        local eventList = list[tostring(name)]</span><br><span class="line">        local index = CheckContainFunc(eventList, func)</span><br><span class="line">        if index then</span><br><span class="line">            print(&quot;Remove &quot; .. name .. &quot; Succeed !&quot;)</span><br><span class="line">            table.remove(eventList, index)</span><br><span class="line">        else</span><br><span class="line">            print(&quot;Attempt To Remove A UnRegister Event: &quot; .. name)</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function RemoveListenerWithTag(tag, name, func)</span><br><span class="line">    local tmpEventTag = eventsWithTag[tostring(tag)]</span><br><span class="line">    if tmpEventTag then</span><br><span class="line">        RemoveListener(tmpEventTag, name, func)</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>同样的，怎么添加事件就需要怎么样删除事件。通过tag跟name查找并删除即可。</p>
<h4 id="调用事件"><a href="#调用事件" class="headerlink" title="调用事件"></a>调用事件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local function DispatchListener(list, name, ...)</span><br><span class="line">    if list[tostring(name)] ~= nil then</span><br><span class="line">        local events = list[tostring(name)]</span><br><span class="line">        for i, v in pairs(events) do</span><br><span class="line">            if v ~= nil then</span><br><span class="line">                v(...)</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        print(string.format(&quot;event is not registed %s&quot;, name))</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function DispatchListenerByTag(tag, name, ...)</span><br><span class="line">    local eventsList = eventsWithTag[tostring(tag)]</span><br><span class="line">    DispatchListener(eventsList, name, ...)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>调用的时候，根据传入的tag跟name查找事件，遍历name下所有的事件并调用。</p>
<p>具体方法可以看Scripts目录下的EventManager.lua文件，事件跟模块的唯一标识符最好也能够放在一个全局类中，这样模块之间调用事件不会出现不必要的交叉</p>
]]></content>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 多版本共存解决方案</title>
    <url>/2019/03/13/Unity/Unity%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>Unity Hub提供多版本Unity共存解决方案，因此下载Unity Hub安装，然后破解Unity Hub即可实现多版本共存</p>
<p>UnityHub下载地址(可能会失效，官网下载即可)：<a href="https://unity3d.com/get-unity/download?_ga=2.29249404.1104840193.1569232230-1452117879.1563960195" target="_blank" rel="noopener">https://unity3d.com/get-unity/download?_ga=2.29249404.1104840193.1569232230-1452117879.1563960195</a></p>
<p>以下内容拷贝自网络：</p>
<p><a href="http://www.manongjc.com/article/116438.html" target="_blank" rel="noopener">http://www.manongjc.com/article/116438.html</a></p>
<p><a href="http://www.unitycn.cn/?p=1133" target="_blank" rel="noopener">http://www.unitycn.cn/?p=1133</a></p>
<p>1.安装好 Unity Hub 和 Node.js 执行以下命令 (记得安装好Unity Hub 后退出 Unity Hub)</p>
<p>　　npm install -g asar</p>
<p> 2.打开 Unity Hub 安装目录下的 resources 文件夹 如:</p>
<p>　　X:\Unity Hub\resources</p>
<p>3.在 resources 文件夹打开命令,解压 app.asar 文件执行以下命令</p>
<p>　　X:\resources&gt; asar extract .\app.asar app</p>
<p>4.解压后删除 resources 文件夹下的 app.asar 文件</p>
<p>5.修改 \resources\app\src\services\licenseService 文件夹下的 licenseClient.js 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getLicenseInfo(callback) &#123;</span><br><span class="line"></span><br><span class="line">　　// load license</span><br><span class="line"></span><br><span class="line">　　// get latest data from licenseCore</span><br><span class="line"></span><br><span class="line">　　//licenseInfo.activated = licenseCore.getLicenseToken().length &gt; 0;//注释这行</span><br><span class="line"></span><br><span class="line">　　licenseInfo.activated = true; //新增这行</span><br></pre></td></tr></table></figure>
<p>6.修改 \resources\app\src\services\licenseService 文件夹下的 licenseCore.js 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">verifyLicenseData(xml) &#123;</span><br><span class="line"></span><br><span class="line">　　return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">　　resolve(true); //新增这行</span><br></pre></td></tr></table></figure>
<p>如果先破解的2017后破解的2018，破解完以后需要使用2017的破解文件（事先备份，破解完以后拷入），否则2017无法打开（其他顺序不确定，先破解18后破解17说不定直接就可以用了，没试过）。</p>
<p>跟Hub应该没啥关系，纯粹是两个版本之间的龌龊吧</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 新版Prefab机制研究</title>
    <url>/2019/03/12/Unity/Prefab2018%E6%96%B0%E7%89%88%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<p>2018的预制体新增了嵌套的功能，这在18以前是不允许的，一旦出现嵌套，则只保存最外层的Prefab信息，内层的预制体Prefab则全部与源预制体Prefab断开链接，之后再修改预制体的时候，如果其是被嵌套，则无法正确的应用过去</p>
<h3 id="预制体资源与预制体实例"><a href="#预制体资源与预制体实例" class="headerlink" title="预制体资源与预制体实例"></a>预制体资源与预制体实例</h3><ol>
<li>预制体资源：保存在Project窗口下的以.prefab结尾的资源</li>
<li>预制体实例：拖入Hierachy面板中的预制体称之为预制体实例，依赖于预制体资源，在Hierachy面板中</li>
</ol>
<h2 id="区分预制体"><a href="#区分预制体" class="headerlink" title="区分预制体"></a>区分预制体</h2><p>在Hierarchy面板中，以<strong><em>蓝色</em></strong>开头的节点都是预制体实例的根节点，也就是说其自身包括下面的子节点是一个预制体，而<strong><em>灰色</em></strong>节点表示普通节点</p>
<p>例如：</p>
<p><img src="https://app.yinxiang.com/shard/s20/res/e0dba9a4-320a-45c6-8a8d-030cf199b8bf.png" alt="img"></p>
<p>如上图，MessageUI为一个预制体，而CommonFloatItem也是一个预制体，CommonFloatItem嵌套在MessageUI中，这就是Prefab的嵌套</p>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>众所周知，一个预制体的节点属性变化以后，一旦应用，那么其所有实例都会跟着改变，</p>
<p>那么在2018中，存在Prefab预制体嵌套的规则，那么如果改变的是嵌套中的预制体，那么他的属性变化会应用到哪个预制体资源上呢？</p>
<h3 id="简单嵌套"><a href="#简单嵌套" class="headerlink" title="简单嵌套"></a>简单嵌套</h3><p>一旦我修改了嵌套预制体的某个属性，那么其Inspector面板前面会有蓝色提示，比如我修改了<strong>CommonFloatItem</strong>预制体<strong>bgLineImg</strong>节点的<strong>RectTransform</strong>的<strong>Height</strong>属性，如下图：</p>
<p><img src="https://app.yinxiang.com/shard/s20/res/bd3c1555-9636-41d7-88cf-ec931d88ded5.png" alt="img"><img src="https://app.yinxiang.com/shard/s20/res/f1d107fc-4ee5-4ff0-94e8-0df0ed5399d4.png" alt="img"></p>
<p>而修改完以后，回到根节点，可以看到其Inspector多了个Overrides</p>
<p><img src="https://app.yinxiang.com/shard/s20/res/3c1666ff-b5bd-44bd-a316-713fa38b8be7.png" alt="img"></p>
<p>打开可以看到当前预制体的所有改动，点击改动的节点，左边会弹出预览界面，预览界面左边是修改前的数据，右边是修改后数据。Revert跟Apply跟之前没有区别，</p>
<p>Revert表示重置修改，回到修改前的数据，Apply点开可以看到”Apply to Prefab ‘CommonFloatItem’”，就是说应用修改的数据到CommonFloatItem这个预制体资源上</p>
<p>Revert All，一键重置所有修改，Apply All一键应用所有修改。</p>
<p><strong>需要注意的是：</strong></p>
<ul>
<li><strong>save等于Apply All</strong></li>
</ul>
<p><img src="https://app.yinxiang.com/shard/s20/res/762767b1-e6a3-4734-bd68-b775b1c5879a.png" alt="img"></p>
<p>进入Prefab Mode以后，Scene右上角会有Save 按钮跟Auto Save的选项，Save为手动保存，需要自己手动点击保存，Auto Save则为自动保存，一旦有修改，会自动保存。</p>
<p>在Prefab Mode模式下，Save跟Auto Save都是Apply All</p>
<h3 id="同个预制体多次嵌套"><a href="#同个预制体多次嵌套" class="headerlink" title="同个预制体多次嵌套"></a>同个预制体多次嵌套</h3><p>同个预制体在一个父预制体中多次嵌套的时候，Apply会有一定的复杂度</p>
<ul>
<li>存在多个同样的预制体实例嵌套的时候，如果一个预制体实例的某个属性存在修改，那么其他同样的预制体实例的属性修改Apply的时候不会应用到之前的那个预制体实例上</li>
</ul>
<p>比如：MessageUI嵌套了CommonFloatItem，而CommonFloatItem又嵌套了两个BlackTransition，那么我修改了上面BlackTransition的Right属性为100，但是不保存，</p>
<p>然后修改下面的BlackTransition的Right属性为400，点击override-apply，此时上面的BlackTransition的Right属性是不会修改为400的，还是100，如下图：</p>
<p><img src="https://app.yinxiang.com/shard/s20/res/f1b85777-0107-46bc-8004-0ff0b54db5dd.png" alt="img"><img src="https://app.yinxiang.com/shard/s20/res/697492a3-277f-48ff-8073-260f51b3aac1.png" alt="img"></p>
<p>所以，这是个需要注意的地方，修改了同一个属性未保存，那么其他预制体实例修改这一属性是不会应用到这个预制体实例上的，修改其他的属性则可以应用。</p>
<ul>
<li>一旦修改了其中一个预制体实例的属性，在应用的时候，如图：</li>
</ul>
<p><img src="https://app.yinxiang.com/shard/s20/res/cd7114ab-1c8e-4cfc-97d4-524a62769d7c.png" alt="img"></p>
<p>我修改了BlackTransition的RectTransform，那么此时在应用的时候，就会弹出两个选择，我是应用到哪个预制体上面，是应用到BlackTransition预制体资源还是应用到其父节点的CommonFloatItem，</p>
<p>这里需要根据需要进行选择</p>
<p>如果是针对所有BlackTransition的修改，则应用到BlackTransition上</p>
<p>如果是针对CommonFloatItem的修改，则应用到CommonFloatItem上</p>
<p>最后：以上嵌套都是随手拉进去的，实际上他们没有嵌套关系~ </p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
</search>
